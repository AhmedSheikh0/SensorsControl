
NTI_Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00003e2c  00003ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800198  00800198  00003ff8  2**0
                  ALLOC
  3 .stab         000039a8  00000000  00000000  00003ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001583  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000090e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000092f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000cdd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000efe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_1>
       8:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_2>
       c:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__vector_3>
      10:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_4>
      14:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_10>
      2c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <main>
      8a:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 1e 	jmp	0x3df2	; 0x3df2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e8       	ldi	r22, 0x8B	; 139
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e9 1e 	jmp	0x3dd2	; 0x3dd2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 e5 1e 	jmp	0x3dca	; 0x3dca <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ed 56       	subi	r30, 0x6D	; 109
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TIMER0_voidSetCompMatch>:

static void (*TIMER0_pvCallBack)(void) = NULL;
static void (*TIMER2_pvCallBack)(void) = NULL;

void TIMER0_voidSetCompMatch( u8 Copyu8Value )
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copyu8Value;
     ef6:	ec e5       	ldi	r30, 0x5C	; 92
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	80 83       	st	Z, r24
}
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <TIMER0_voidInit>:

void TIMER0_voidInit(void)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62

#if		TIMER0_MODE	== NORMAL_MODE
	/* Choose Normal Mode */
	Clear_Bit(TCCR0, TCCR0_WGW00);
     f0e:	a3 e5       	ldi	r26, 0x53	; 83
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e3 e5       	ldi	r30, 0x53	; 83
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7b       	andi	r24, 0xBF	; 191
     f1a:	8c 93       	st	X, r24
	Clear_Bit(TCCR0, TCCR0_WGW01);
     f1c:	a3 e5       	ldi	r26, 0x53	; 83
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e3 e5       	ldi	r30, 0x53	; 83
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	87 7f       	andi	r24, 0xF7	; 247
     f28:	8c 93       	st	X, r24
#error "Wrong Input"
#endif


	// output Overflow Interrupt
    Set_Bit(TIMSK, TIMSK_TOIE);
     f2a:	a9 e5       	ldi	r26, 0x59	; 89
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e9 e5       	ldi	r30, 0x59	; 89
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	8c 93       	st	X, r24


	/* Clear on Top, Set on Comp */
	Set_Bit(TCCR0, TCCR0_COM01);
     f38:	a3 e5       	ldi	r26, 0x53	; 83
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e3 e5       	ldi	r30, 0x53	; 83
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	8c 93       	st	X, r24
	Clear_Bit(TCCR0, TCCR0_COM00);
     f46:	a3 e5       	ldi	r26, 0x53	; 83
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e3 e5       	ldi	r30, 0x53	; 83
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8f 7e       	andi	r24, 0xEF	; 239
     f52:	8c 93       	st	X, r24
	Set_Bit(TCCR0, TCCR0_CS00);
	Clear_Bit(TCCR0, TCCR0_CS01);
	Set_Bit(TCCR0, TCCR0_CS02);
#elif	PRESCALER_SELECT == EXT_CLOCK
	/* Prescaler External Clock */
	Clear_Bit(TCCR0, TCCR0_CS00);
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
	Set_Bit(TCCR0, TCCR0_CS01);
     f62:	a3 e5       	ldi	r26, 0x53	; 83
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	8c 93       	st	X, r24
	Set_Bit(TCCR0, TCCR0_CS02);
     f70:	a3 e5       	ldi	r26, 0x53	; 83
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e3 e5       	ldi	r30, 0x53	; 83
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	84 60       	ori	r24, 0x04	; 4
     f7c:	8c 93       	st	X, r24
#else
#endif

}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <TIMER0_u8GetTCNT0>:

u8 TIMER0_u8GetTCNT0()
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
     f8c:	e2 e5       	ldi	r30, 0x52	; 82
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <TIMER0_voidSetTCNT0>:

void TIMER0_voidSetTCNT0(u8 Copy_u8Value)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
     fa4:	e2 e5       	ldi	r30, 0x52	; 82
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	80 83       	st	Z, r24
}
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackfunc)(void))
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <TIMER0_u8SetCallBack+0x6>
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9b 83       	std	Y+3, r25	; 0x03
     fc2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ERROR = OK;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBackfunc != NULL)
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	39 f0       	breq	.+14     	; 0xfde <TIMER0_u8SetCallBack+0x2a>
	{
		TIMER0_pvCallBack = Copy_pvCallBackfunc;
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	90 93 99 01 	sts	0x0199, r25
     fd8:	80 93 98 01 	sts	0x0198, r24
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ERROR = NOK;
     fde:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ERROR;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	/* Set Mode to Non Inverting Fast PWM Mode */
	Set_Bit(TCCR1A,TCCR1A_COM1A1);
     ff6:	af e4       	ldi	r26, 0x4F	; 79
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ef e4       	ldi	r30, 0x4F	; 79
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	8c 93       	st	X, r24
	Clear_Bit(TCCR1A,TCCR1A_COM1A0);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7b       	andi	r24, 0xBF	; 191
    1010:	8c 93       	st	X, r24
	Set_Bit(TCCR1A, TCCR1A_COM1B1);
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 62       	ori	r24, 0x20	; 32
    101e:	8c 93       	st	X, r24

	/* Set Waveform to fast PWM */
	Clear_Bit(TCCR1A, TCCR1A_WGM10);
    1020:	af e4       	ldi	r26, 0x4F	; 79
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ef e4       	ldi	r30, 0x4F	; 79
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
	Set_Bit(TCCR1A,TCCR1A_WGM11);
    102e:	af e4       	ldi	r26, 0x4F	; 79
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ef e4       	ldi	r30, 0x4F	; 79
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	82 60       	ori	r24, 0x02	; 2
    103a:	8c 93       	st	X, r24
	Set_Bit(TCCR1B,TCCR1B_WGM12);
    103c:	ae e4       	ldi	r26, 0x4E	; 78
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ee e4       	ldi	r30, 0x4E	; 78
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 60       	ori	r24, 0x08	; 8
    1048:	8c 93       	st	X, r24
	Set_Bit(TCCR1B,TCCR1B_WGM13);
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 61       	ori	r24, 0x10	; 16
    1056:	8c 93       	st	X, r24

	/* Set Prescaler   */
//	TCCR1B &= Prescaler_Mask;
	//TCCR1B |= DIV_BY_8;

	Set_Bit(TCCR1B, TCCR1B_CS10); // Prescaler 64
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	8c 93       	st	X, r24
	Set_Bit(TCCR1B, TCCR1B_CS11); // Prescaler 64
    1066:	ae e4       	ldi	r26, 0x4E	; 78
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ee e4       	ldi	r30, 0x4E	; 78
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	8c 93       	st	X, r24


}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TIMER1_voidSetICR>:

void TIMER1_voidSetICR( u16 Copyu16Top )
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <TIMER1_voidSetICR+0x6>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copyu16Top;
    1088:	e6 e4       	ldi	r30, 0x46	; 70
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24

}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <TIMER1_voidSetDutyCycle>:

void TIMER1_voidSetDutyCycle( u16 Copyu16Value )
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <TIMER1_voidSetDutyCycle+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copyu16Value;
    10ac:	ea e4       	ldi	r30, 0x4A	; 74
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62

#if		TIMER2_MODE	== NORMAL_MODE
	/* Choose Normal Mode */
	Clear_Bit(TCCR2, TCCR2_WGW20);
    10ca:	a5 e4       	ldi	r26, 0x45	; 69
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e4       	ldi	r30, 0x45	; 69
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7b       	andi	r24, 0xBF	; 191
    10d6:	8c 93       	st	X, r24
	Clear_Bit(TCCR2, TCCR2_WGW21);
    10d8:	a5 e4       	ldi	r26, 0x45	; 69
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e4       	ldi	r30, 0x45	; 69
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	87 7f       	andi	r24, 0xF7	; 247
    10e4:	8c 93       	st	X, r24
#error "Wrong Input"
#endif


	// output Overflow Interrupt
    Set_Bit(TIMSK, TIMSK_TOIE);
    10e6:	a9 e5       	ldi	r26, 0x59	; 89
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e9 e5       	ldi	r30, 0x59	; 89
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	81 60       	ori	r24, 0x01	; 1
    10f2:	8c 93       	st	X, r24


	/* Clear on Top, Set on Comp */
	Set_Bit(TCCR2, TCCR2_COM21);
    10f4:	a5 e4       	ldi	r26, 0x45	; 69
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e4       	ldi	r30, 0x45	; 69
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 62       	ori	r24, 0x20	; 32
    1100:	8c 93       	st	X, r24
	Clear_Bit(TCCR2, TCCR2_COM20);
    1102:	a5 e4       	ldi	r26, 0x45	; 69
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e4       	ldi	r30, 0x45	; 69
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 7e       	andi	r24, 0xEF	; 239
    110e:	8c 93       	st	X, r24
	Set_Bit(TCCR2, TCCR2_CS20);
	Clear_Bit(TCCR2, TCCR2_CS21);
	Set_Bit(TCCR2, TCCR2_CS22);
#elif	PRESCALER_SELECT == EXT_CLOCK
	/* Prescaler External Clock */
	Clear_Bit(TCCR2, TCCR2_CS20);
    1110:	a5 e4       	ldi	r26, 0x45	; 69
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e5 e4       	ldi	r30, 0x45	; 69
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	8e 7f       	andi	r24, 0xFE	; 254
    111c:	8c 93       	st	X, r24
	Set_Bit(TCCR2, TCCR2_CS21);
    111e:	a5 e4       	ldi	r26, 0x45	; 69
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e4       	ldi	r30, 0x45	; 69
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	82 60       	ori	r24, 0x02	; 2
    112a:	8c 93       	st	X, r24
	Set_Bit(TCCR2, TCCR2_CS22);
    112c:	a5 e4       	ldi	r26, 0x45	; 69
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e4       	ldi	r30, 0x45	; 69
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	84 60       	ori	r24, 0x04	; 4
    1138:	8c 93       	st	X, r24
#else
#endif

}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <__vector_10>:



void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_pvCallBack != NULL)
    116a:	80 91 98 01 	lds	r24, 0x0198
    116e:	90 91 99 01 	lds	r25, 0x0199
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	29 f0       	breq	.+10     	; 0x1180 <__vector_10+0x40>
	{
		TIMER0_pvCallBack();
    1176:	e0 91 98 01 	lds	r30, 0x0198
    117a:	f0 91 99 01 	lds	r31, 0x0199
    117e:	09 95       	icall
	}
}
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti

000011a6 <__vector_11>:

void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_pvCallBack != NULL)
    11d0:	80 91 98 01 	lds	r24, 0x0198
    11d4:	90 91 99 01 	lds	r25, 0x0199
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	29 f0       	breq	.+10     	; 0x11e6 <__vector_11+0x40>
	{
		TIMER0_pvCallBack();
    11dc:	e0 91 98 01 	lds	r30, 0x0198
    11e0:	f0 91 99 01 	lds	r31, 0x0199
    11e4:	09 95       	icall
	}
}
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	0f 90       	pop	r0
    1208:	1f 90       	pop	r1
    120a:	18 95       	reti

0000120c <__vector_4>:



void __vector_4(void)  __attribute__((signal));
void __vector_4(void)
{
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	2f 93       	push	r18
    1218:	3f 93       	push	r19
    121a:	4f 93       	push	r20
    121c:	5f 93       	push	r21
    121e:	6f 93       	push	r22
    1220:	7f 93       	push	r23
    1222:	8f 93       	push	r24
    1224:	9f 93       	push	r25
    1226:	af 93       	push	r26
    1228:	bf 93       	push	r27
    122a:	ef 93       	push	r30
    122c:	ff 93       	push	r31
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	if( TIMER2_pvCallBack != NULL)
    1236:	80 91 9a 01 	lds	r24, 0x019A
    123a:	90 91 9b 01 	lds	r25, 0x019B
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	29 f0       	breq	.+10     	; 0x124c <__vector_4+0x40>
	{
		TIMER2_pvCallBack();
    1242:	e0 91 9a 01 	lds	r30, 0x019A
    1246:	f0 91 9b 01 	lds	r31, 0x019B
    124a:	09 95       	icall
	}
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	ff 91       	pop	r31
    1252:	ef 91       	pop	r30
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_5>:

void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	2f 93       	push	r18
    127e:	3f 93       	push	r19
    1280:	4f 93       	push	r20
    1282:	5f 93       	push	r21
    1284:	6f 93       	push	r22
    1286:	7f 93       	push	r23
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	if( TIMER2_pvCallBack != NULL)
    129c:	80 91 9a 01 	lds	r24, 0x019A
    12a0:	90 91 9b 01 	lds	r25, 0x019B
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	29 f0       	breq	.+10     	; 0x12b2 <__vector_5+0x40>
	{
		TIMER2_pvCallBack();
    12a8:	e0 91 9a 01 	lds	r30, 0x019A
    12ac:	f0 91 9b 01 	lds	r31, 0x019B
    12b0:	09 95       	icall
	}
}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <PORT_voidInit>:
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR ;
    12e0:	ea e3       	ldi	r30, 0x3A	; 58
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8c ee       	ldi	r24, 0xEC	; 236
    12e6:	80 83       	st	Z, r24
    DDRB = PORTB_DIR ;
    12e8:	e7 e3       	ldi	r30, 0x37	; 55
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8b ef       	ldi	r24, 0xFB	; 251
    12ee:	80 83       	st	Z, r24
    DDRC = PORTC_DIR ;
    12f0:	e4 e3       	ldi	r30, 0x34	; 52
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8f e3       	ldi	r24, 0x3F	; 63
    12f6:	80 83       	st	Z, r24
    DDRD = PORTD_DIR ;
    12f8:	e1 e3       	ldi	r30, 0x31	; 49
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 e2       	ldi	r24, 0x20	; 32
    12fe:	80 83       	st	Z, r24

    PORTA = PORTA_INIT_VALUE;
    1300:	eb e3       	ldi	r30, 0x3B	; 59
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	10 82       	st	Z, r1
    PORTB = PORTB_INIT_VALUE;
    1306:	e8 e3       	ldi	r30, 0x38	; 56
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	84 e0       	ldi	r24, 0x04	; 4
    130c:	80 83       	st	Z, r24
    PORTC = PORTC_INIT_VALUE;
    130e:	e5 e3       	ldi	r30, 0x35	; 53
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	10 82       	st	Z, r1
    PORTD = PORTD_INIT_VALUE;
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8c e0       	ldi	r24, 0x0C	; 12
    131a:	80 83       	st	Z, r24


}
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <GIE_voidEnable>:

#include "GIE_Register.h"
#include "GIE_Interface.h"

void GIE_voidEnable(void)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt  */
	Set_Bit(SREG, SREG_I);
    132a:	af e5       	ldi	r26, 0x5F	; 95
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ef e5       	ldi	r30, 0x5F	; 95
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	80 68       	ori	r24, 0x80	; 128
    1336:	8c 93       	st	X, r24
}
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	/* Disable Global Interrupt  */
	Clear_Bit(SREG, SREG_I);
    1346:	af e5       	ldi	r26, 0x5F	; 95
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ef e5       	ldi	r30, 0x5F	; 95
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8f 77       	andi	r24, 0x7F	; 127
    1352:	8c 93       	st	X, r24
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <EXTI0_voidInit>:
void (*EXTI_pvINT1Func)(void) = NULL;
void (*EXTI_pvINT2Func)(void) = NULL;


void EXTI0_voidInit(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT0_SENSE_CONTROL == FALLING_EADGE
	/* ISC01 -> 1, ISC00 -> 0  */
	Set_Bit(MCUCR, MCUCR_ISC01);
    1362:	a5 e5       	ldi	r26, 0x55	; 85
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e5 e5       	ldi	r30, 0x55	; 85
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	82 60       	ori	r24, 0x02	; 2
    136e:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC00);
    1370:	a5 e5       	ldi	r26, 0x55	; 85
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e5       	ldi	r30, 0x55	; 85
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC00);
	Clear_Bit(MCUCR, MCUCR_ISC01);
#else
#error "WRONG SENCE CONTROL"
#endif
}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <EXTI0_voidEnable>:

void EXTI0_voidEnable(void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT0);
    138c:	ab e5       	ldi	r26, 0x5B	; 91
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	eb e5       	ldi	r30, 0x5B	; 91
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 64       	ori	r24, 0x40	; 64
    1398:	8c 93       	st	X, r24
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <EXTI0_voidDisable>:

void EXTI0_voidDisable(void)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT0);
    13a8:	ab e5       	ldi	r26, 0x5B	; 91
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e5       	ldi	r30, 0x5B	; 91
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 7b       	andi	r24, 0xBF	; 191
    13b4:	8c 93       	st	X, r24
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <EXT0_voidSetSignalch>:

void EXT0_voidSetSignalch(u8 SenseCpy)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <EXT0_voidSetSignalch+0x6>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
	switch( SenseCpy )
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3b 83       	std	Y+3, r19	; 0x03
    13d2:	2a 83       	std	Y+2, r18	; 0x02
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	91 05       	cpc	r25, r1
    13dc:	99 f1       	breq	.+102    	; 0x1444 <EXT0_voidSetSignalch+0x88>
    13de:	2a 81       	ldd	r18, Y+2	; 0x02
    13e0:	3b 81       	ldd	r19, Y+3	; 0x03
    13e2:	23 30       	cpi	r18, 0x03	; 3
    13e4:	31 05       	cpc	r19, r1
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <EXT0_voidSetSignalch+0x38>
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	9b 81       	ldd	r25, Y+3	; 0x03
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	c1 f1       	breq	.+112    	; 0x1462 <EXT0_voidSetSignalch+0xa6>
    13f2:	45 c0       	rjmp	.+138    	; 0x147e <EXT0_voidSetSignalch+0xc2>
    13f4:	2a 81       	ldd	r18, Y+2	; 0x02
    13f6:	3b 81       	ldd	r19, Y+3	; 0x03
    13f8:	23 30       	cpi	r18, 0x03	; 3
    13fa:	31 05       	cpc	r19, r1
    13fc:	a1 f0       	breq	.+40     	; 0x1426 <EXT0_voidSetSignalch+0x6a>
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	91 05       	cpc	r25, r1
    1406:	d9 f5       	brne	.+118    	; 0x147e <EXT0_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC01 -> 1, ISC00 -> 0  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    1408:	a5 e5       	ldi	r26, 0x55	; 85
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e5       	ldi	r30, 0x55	; 85
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    1416:	a5 e5       	ldi	r26, 0x55	; 85
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e5       	ldi	r30, 0x55	; 85
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8e 7f       	andi	r24, 0xFE	; 254
    1422:	8c 93       	st	X, r24
    1424:	2c c0       	rjmp	.+88     	; 0x147e <EXT0_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC01 -> 1, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    1426:	a5 e5       	ldi	r26, 0x55	; 85
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e5 e5       	ldi	r30, 0x55	; 85
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	82 60       	ori	r24, 0x02	; 2
    1432:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
    1434:	a5 e5       	ldi	r26, 0x55	; 85
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e5       	ldi	r30, 0x55	; 85
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	81 60       	ori	r24, 0x01	; 1
    1440:	8c 93       	st	X, r24
    1442:	1d c0       	rjmp	.+58     	; 0x147e <EXT0_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC01 -> 0, ISC00 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC01);
    1444:	a5 e5       	ldi	r26, 0x55	; 85
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e5       	ldi	r30, 0x55	; 85
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8d 7f       	andi	r24, 0xFD	; 253
    1450:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    1452:	a5 e5       	ldi	r26, 0x55	; 85
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e5       	ldi	r30, 0x55	; 85
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8e 7f       	andi	r24, 0xFE	; 254
    145e:	8c 93       	st	X, r24
    1460:	0e c0       	rjmp	.+28     	; 0x147e <EXT0_voidSetSignalch+0xc2>

		break;
	case ON_CHANGE:
		/* ISC01 -> 0, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC00);
    1462:	a5 e5       	ldi	r26, 0x55	; 85
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e5       	ldi	r30, 0x55	; 85
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	81 60       	ori	r24, 0x01	; 1
    146e:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC01);
    1470:	a5 e5       	ldi	r26, 0x55	; 85
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e5       	ldi	r30, 0x55	; 85
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8d 7f       	andi	r24, 0xFD	; 253
    147c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <EXTI1_voidInit>:

void EXTI1_voidInit(void)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT1_SENSE_CONTROL == FALLING_EADGE
	/* ISC11 -> 1, ISC10 -> 0  */
	Clear_Bit(MCUCR, MCUCR_ISC10);
    1492:	a5 e5       	ldi	r26, 0x55	; 85
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e5       	ldi	r30, 0x55	; 85
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8b 7f       	andi	r24, 0xFB	; 251
    149e:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC11);
    14a0:	a5 e5       	ldi	r26, 0x55	; 85
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e5       	ldi	r30, 0x55	; 85
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	88 60       	ori	r24, 0x08	; 8
    14ac:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC11);
	Set_Bit(MCUCR, MCUCR_ISC10);

#error "WRONG SENCE CONTROL"
#endif
}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <EXTI1_voidEnable>:

void EXTI1_voidEnable(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT1);
    14bc:	ab e5       	ldi	r26, 0x5B	; 91
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	eb e5       	ldi	r30, 0x5B	; 91
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 68       	ori	r24, 0x80	; 128
    14c8:	8c 93       	st	X, r24
}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <EXTI1_voidDisable>:

void EXTI1_voidDisable(void)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT1);
    14d8:	ab e5       	ldi	r26, 0x5B	; 91
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	eb e5       	ldi	r30, 0x5B	; 91
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 77       	andi	r24, 0x7F	; 127
    14e4:	8c 93       	st	X, r24
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <EXT1_voidSetSignalch>:

void EXT1_voidSetSignalch(u8 SenseCpy)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <EXT1_voidSetSignalch+0x6>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01

	switch (SenseCpy)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3b 83       	std	Y+3, r19	; 0x03
    1502:	2a 83       	std	Y+2, r18	; 0x02
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	91 05       	cpc	r25, r1
    150c:	99 f1       	breq	.+102    	; 0x1574 <EXT1_voidSetSignalch+0x88>
    150e:	2a 81       	ldd	r18, Y+2	; 0x02
    1510:	3b 81       	ldd	r19, Y+3	; 0x03
    1512:	23 30       	cpi	r18, 0x03	; 3
    1514:	31 05       	cpc	r19, r1
    1516:	34 f4       	brge	.+12     	; 0x1524 <EXT1_voidSetSignalch+0x38>
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 05       	cpc	r25, r1
    1520:	c1 f1       	breq	.+112    	; 0x1592 <EXT1_voidSetSignalch+0xa6>
    1522:	45 c0       	rjmp	.+138    	; 0x15ae <EXT1_voidSetSignalch+0xc2>
    1524:	2a 81       	ldd	r18, Y+2	; 0x02
    1526:	3b 81       	ldd	r19, Y+3	; 0x03
    1528:	23 30       	cpi	r18, 0x03	; 3
    152a:	31 05       	cpc	r19, r1
    152c:	a1 f0       	breq	.+40     	; 0x1556 <EXT1_voidSetSignalch+0x6a>
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	91 05       	cpc	r25, r1
    1536:	d9 f5       	brne	.+118    	; 0x15ae <EXT1_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC11 -> 1, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1538:	a5 e5       	ldi	r26, 0x55	; 85
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e5       	ldi	r30, 0x55	; 85
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8b 7f       	andi	r24, 0xFB	; 251
    1544:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	88 60       	ori	r24, 0x08	; 8
    1552:	8c 93       	st	X, r24
    1554:	2c c0       	rjmp	.+88     	; 0x15ae <EXT1_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC10);
    1556:	a5 e5       	ldi	r26, 0x55	; 85
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e5       	ldi	r30, 0x55	; 85
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	84 60       	ori	r24, 0x04	; 4
    1562:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1564:	a5 e5       	ldi	r26, 0x55	; 85
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e5       	ldi	r30, 0x55	; 85
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	88 60       	ori	r24, 0x08	; 8
    1570:	8c 93       	st	X, r24
    1572:	1d c0       	rjmp	.+58     	; 0x15ae <EXT1_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC11 -> 0, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e5       	ldi	r30, 0x55	; 85
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8b 7f       	andi	r24, 0xFB	; 251
    1580:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1582:	a5 e5       	ldi	r26, 0x55	; 85
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e5       	ldi	r30, 0x55	; 85
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	87 7f       	andi	r24, 0xF7	; 247
    158e:	8c 93       	st	X, r24
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <EXT1_voidSetSignalch+0xc2>
		break;
	case ON_CHANGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1592:	a5 e5       	ldi	r26, 0x55	; 85
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e5 e5       	ldi	r30, 0x55	; 85
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	87 7f       	andi	r24, 0xF7	; 247
    159e:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC10);
    15a0:	a5 e5       	ldi	r26, 0x55	; 85
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e5       	ldi	r30, 0x55	; 85
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <EXTI2_voidInit>:


// INTERRUPT 1
void EXTI2_voidInit(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62

#if 	SELECT_INT2_SENSE_CONTROL == FALLING_EADGE
	Clear_Bit(MCUCR, MCUCSR_ISC2);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8f 7b       	andi	r24, 0xBF	; 191
    15ce:	8c 93       	st	X, r24
#elif 	SELECT_INT2_SENSE_CONTROL == RISING_EADGE
	Set_Bit(MCUCR, MCUCSR_ISC2);
#else
#endif

}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <EXTI2_voidEnable>:

//enable EXTI
void EXTI2_voidEnable(void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT2);
    15de:	ab e5       	ldi	r26, 0x5B	; 91
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	eb e5       	ldi	r30, 0x5B	; 91
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	80 62       	ori	r24, 0x20	; 32
    15ea:	8c 93       	st	X, r24
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <EXTI2_voidDisable>:

//disable EXTI
void EXTI2_voidDisable(void)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT2);
    15fa:	ab e5       	ldi	r26, 0x5B	; 91
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	eb e5       	ldi	r30, 0x5B	; 91
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 7d       	andi	r24, 0xDF	; 223
    1606:	8c 93       	st	X, r24
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <EXT2_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXT2_voidSetSignalch(u8 SenseCpy)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <EXT2_voidSetSignalch+0x6>
    1614:	0f 92       	push	r0
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy)
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3b 83       	std	Y+3, r19	; 0x03
    1624:	2a 83       	std	Y+2, r18	; 0x02
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	69 f0       	breq	.+26     	; 0x164a <EXT2_voidSetSignalch+0x3c>
    1630:	2a 81       	ldd	r18, Y+2	; 0x02
    1632:	3b 81       	ldd	r19, Y+3	; 0x03
    1634:	24 30       	cpi	r18, 0x04	; 4
    1636:	31 05       	cpc	r19, r1
    1638:	79 f4       	brne	.+30     	; 0x1658 <EXT2_voidSetSignalch+0x4a>
	{
	case FALLING_EADGE:
		Clear_Bit(MCUCR, MCUCSR_ISC2);
    163a:	a5 e5       	ldi	r26, 0x55	; 85
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e5       	ldi	r30, 0x55	; 85
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 7b       	andi	r24, 0xBF	; 191
    1646:	8c 93       	st	X, r24
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <EXT2_voidSetSignalch+0x4a>
		break;
	case RISING_EADGE:
		Set_Bit(MCUCR, MCUCSR_ISC2);
    164a:	a5 e5       	ldi	r26, 0x55	; 85
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e5       	ldi	r30, 0x55	; 85
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	80 64       	ori	r24, 0x40	; 64
    1656:	8c 93       	st	X, r24
		break;

	}
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <EXT0_VID_SET_CALL_BACK>:



//callback function
void EXT0_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <EXT0_VID_SET_CALL_BACK+0x6>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	31 f0       	breq	.+12     	; 0x1686 <EXT0_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT0Func = PTR;
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	90 93 9d 01 	sts	0x019D, r25
    1682:	80 93 9c 01 	sts	0x019C, r24
	}
	else
	{

	}
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	00 d0       	rcall	.+0      	; 0x1696 <EXT1_VID_SET_CALL_BACK+0x6>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	31 f0       	breq	.+12     	; 0x16b2 <EXT1_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT1Func = PTR;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	90 93 9f 01 	sts	0x019F, r25
    16ae:	80 93 9e 01 	sts	0x019E, r24
	}
	else
	{

	}
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void))
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <EXT2_VID_SET_CALL_BACK+0x6>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	31 f0       	breq	.+12     	; 0x16de <EXT2_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT2Func = PTR;
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	9a 81       	ldd	r25, Y+2	; 0x02
    16d6:	90 93 a1 01 	sts	0x01A1, r25
    16da:	80 93 a0 01 	sts	0x01A0, r24
	}
	else
	{

	}
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <__vector_1>:



void __vector_1(void)__attribute__((signal,used, externally_visible));
void __vector_1(void)
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT0Func != NULL)
    1712:	80 91 9c 01 	lds	r24, 0x019C
    1716:	90 91 9d 01 	lds	r25, 0x019D
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	29 f0       	breq	.+10     	; 0x1728 <__vector_1+0x40>
	{
		EXTI_pvINT0Func();
    171e:	e0 91 9c 01 	lds	r30, 0x019C
    1722:	f0 91 9d 01 	lds	r31, 0x019D
    1726:	09 95       	icall
	}
}
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <__vector_2>:

void __vector_2(void)__attribute__((signal,used, externally_visible));
void __vector_2(void)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT1Func != NULL)
    1778:	80 91 9e 01 	lds	r24, 0x019E
    177c:	90 91 9f 01 	lds	r25, 0x019F
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	29 f0       	breq	.+10     	; 0x178e <__vector_2+0x40>
	{
		EXTI_pvINT1Func();
    1784:	e0 91 9e 01 	lds	r30, 0x019E
    1788:	f0 91 9f 01 	lds	r31, 0x019F
    178c:	09 95       	icall
	}
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <__vector_3>:

void __vector_3(void)__attribute__((signal,used, externally_visible));
void __vector_3(void)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT2Func != NULL)
    17de:	80 91 a0 01 	lds	r24, 0x01A0
    17e2:	90 91 a1 01 	lds	r25, 0x01A1
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	29 f0       	breq	.+10     	; 0x17f4 <__vector_3+0x40>
	{
		EXTI_pvINT2Func();
    17ea:	e0 91 a0 01 	lds	r30, 0x01A0
    17ee:	f0 91 a1 01 	lds	r31, 0x01A1
    17f2:	09 95       	icall
	}
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <DIO_u8SetPinValue>:
}
*/

// Set "Pin" Value
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <DIO_u8SetPinValue+0x6>
    1820:	00 d0       	rcall	.+0      	; 0x1822 <DIO_u8SetPinValue+0x8>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <DIO_u8SetPinValue+0xa>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	8a 83       	std	Y+2, r24	; 0x02
    182a:	6b 83       	std	Y+3, r22	; 0x03
    182c:	4c 83       	std	Y+4, r20	; 0x04
    u8 ERROR_FLAG = 0;
    182e:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3e 83       	std	Y+6, r19	; 0x06
    1838:	2d 83       	std	Y+5, r18	; 0x05
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	91 05       	cpc	r25, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <DIO_u8SetPinValue+0x2c>
    1844:	49 c0       	rjmp	.+146    	; 0x18d8 <DIO_u8SetPinValue+0xbe>
    1846:	2d 81       	ldd	r18, Y+5	; 0x05
    1848:	3e 81       	ldd	r19, Y+6	; 0x06
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	2c f4       	brge	.+10     	; 0x185a <DIO_u8SetPinValue+0x40>
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	71 f0       	breq	.+28     	; 0x1874 <DIO_u8SetPinValue+0x5a>
    1858:	d4 c0       	rjmp	.+424    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
    185a:	2d 81       	ldd	r18, Y+5	; 0x05
    185c:	3e 81       	ldd	r19, Y+6	; 0x06
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <DIO_u8SetPinValue+0x4c>
    1864:	6b c0       	rjmp	.+214    	; 0x193c <DIO_u8SetPinValue+0x122>
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <DIO_u8SetPinValue+0x58>
    1870:	97 c0       	rjmp	.+302    	; 0x19a0 <DIO_u8SetPinValue+0x186>
    1872:	c7 c0       	rjmp	.+398    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
    {
    case DIO_u8PORTA:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <DIO_u8SetPinValue+0x88>
            Set_Bit(PORTA, Copy_u8Pin);
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <DIO_u8SetPinValue+0x7e>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <DIO_u8SetPinValue+0x7a>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	b0 c0       	rjmp	.+352    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	88 23       	and	r24, r24
    18a6:	a9 f4       	brne	.+42     	; 0x18d2 <DIO_u8SetPinValue+0xb8>
            Clear_Bit(PORTA, Copy_u8Pin);
    18a8:	ab e3       	ldi	r26, 0x3B	; 59
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_u8SetPinValue+0xac>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_u8SetPinValue+0xa8>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	98 c0       	rjmp	.+304    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	95 c0       	rjmp	.+298    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTB:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	a1 f4       	brne	.+40     	; 0x1906 <DIO_u8SetPinValue+0xec>
            Set_Bit(PORTB, Copy_u8Pin);
    18de:	a8 e3       	ldi	r26, 0x38	; 56
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_u8SetPinValue+0xe2>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_u8SetPinValue+0xde>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	7e c0       	rjmp	.+252    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	88 23       	and	r24, r24
    190a:	a9 f4       	brne	.+42     	; 0x1936 <DIO_u8SetPinValue+0x11c>
            Clear_Bit(PORTB, Copy_u8Pin);
    190c:	a8 e3       	ldi	r26, 0x38	; 56
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e8 e3       	ldi	r30, 0x38	; 56
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <DIO_u8SetPinValue+0x110>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <DIO_u8SetPinValue+0x10c>
    192e:	80 95       	com	r24
    1930:	84 23       	and	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	66 c0       	rjmp	.+204    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	63 c0       	rjmp	.+198    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTC:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	a1 f4       	brne	.+40     	; 0x196a <DIO_u8SetPinValue+0x150>
            Set_Bit(PORTC, Copy_u8Pin);
    1942:	a5 e3       	ldi	r26, 0x35	; 53
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e3       	ldi	r30, 0x35	; 53
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_u8SetPinValue+0x146>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_u8SetPinValue+0x142>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	4c c0       	rjmp	.+152    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	88 23       	and	r24, r24
    196e:	a9 f4       	brne	.+42     	; 0x199a <DIO_u8SetPinValue+0x180>
            Clear_Bit(PORTC, Copy_u8Pin);
    1970:	a5 e3       	ldi	r26, 0x35	; 53
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e5 e3       	ldi	r30, 0x35	; 53
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_u8SetPinValue+0x174>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_u8SetPinValue+0x170>
    1992:	80 95       	com	r24
    1994:	84 23       	and	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	34 c0       	rjmp	.+104    	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	31 c0       	rjmp	.+98     	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTD:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	a1 f4       	brne	.+40     	; 0x19ce <DIO_u8SetPinValue+0x1b4>
            Set_Bit(PORTD, Copy_u8Pin);
    19a6:	a2 e3       	ldi	r26, 0x32	; 50
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e2 e3       	ldi	r30, 0x32	; 50
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <DIO_u8SetPinValue+0x1aa>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <DIO_u8SetPinValue+0x1a6>
    19c8:	84 2b       	or	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	1a c0       	rjmp	.+52     	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	88 23       	and	r24, r24
    19d2:	a9 f4       	brne	.+42     	; 0x19fe <DIO_u8SetPinValue+0x1e4>
            Clear_Bit(PORTD, Copy_u8Pin);
    19d4:	a2 e3       	ldi	r26, 0x32	; 50
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e2 e3       	ldi	r30, 0x32	; 50
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_u8SetPinValue+0x1d8>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_u8SetPinValue+0x1d4>
    19f6:	80 95       	com	r24
    19f8:	84 23       	and	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01

    default:
        break;
    }

    return ERROR_FLAG;
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a04:	26 96       	adiw	r28, 0x06	; 6
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <DIO_u8SetPortValue>:
    return Local_u8Error;
}*/

// Set "Port" Value
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <DIO_u8SetPortValue+0x6>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <DIO_u8SetPortValue+0x8>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	8a 83       	std	Y+2, r24	; 0x02
    1a26:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Error = 0;
    1a28:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Port < 4)
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	98 f5       	brcc	.+102    	; 0x1a96 <DIO_u8SetPortValue+0x80>
    {
        switch (Copy_u8Port)
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3d 83       	std	Y+5, r19	; 0x05
    1a38:	2c 83       	std	Y+4, r18	; 0x04
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	d1 f0       	breq	.+52     	; 0x1a78 <DIO_u8SetPortValue+0x62>
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <DIO_u8SetPortValue+0x42>
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	9d 81       	ldd	r25, Y+5	; 0x05
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <DIO_u8SetPortValue+0x58>
    1a56:	21 c0       	rjmp	.+66     	; 0x1a9a <DIO_u8SetPortValue+0x84>
    1a58:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <DIO_u8SetPortValue+0x6c>
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	91 05       	cpc	r25, r1
    1a6a:	81 f0       	breq	.+32     	; 0x1a8c <DIO_u8SetPortValue+0x76>
    1a6c:	16 c0       	rjmp	.+44     	; 0x1a9a <DIO_u8SetPortValue+0x84>
        {
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	80 83       	st	Z, r24
    1a76:	11 c0       	rjmp	.+34     	; 0x1a9a <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
    1a78:	e8 e3       	ldi	r30, 0x38	; 56
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	80 83       	st	Z, r24
    1a80:	0c c0       	rjmp	.+24     	; 0x1a9a <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
    1a82:	e5 e3       	ldi	r30, 0x35	; 53
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	80 83       	st	Z, r24
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
    1a8c:	e2 e3       	ldi	r30, 0x32	; 50
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	80 83       	st	Z, r24
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <DIO_u8SetPortValue+0x84>
            break;
        }
    }
    else
    {
        Local_u8Error = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8Error;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <DIO_GetPinValue>:

// Get/Read "Pin" value
u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Value)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	27 97       	sbiw	r28, 0x07	; 7
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	6a 83       	std	Y+2, r22	; 0x02
    1ac4:	5c 83       	std	Y+4, r21	; 0x04
    1ac6:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3f 83       	std	Y+7, r19	; 0x07
    1ad0:	2e 83       	std	Y+6, r18	; 0x06
    1ad2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ad4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ad6:	41 30       	cpi	r20, 0x01	; 1
    1ad8:	51 05       	cpc	r21, r1
    1ada:	59 f1       	breq	.+86     	; 0x1b32 <DIO_GetPinValue+0x86>
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae0:	82 30       	cpi	r24, 0x02	; 2
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	34 f4       	brge	.+12     	; 0x1af2 <DIO_GetPinValue+0x46>
    1ae6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ae8:	3f 81       	ldd	r19, Y+7	; 0x07
    1aea:	21 15       	cp	r18, r1
    1aec:	31 05       	cpc	r19, r1
    1aee:	69 f0       	breq	.+26     	; 0x1b0a <DIO_GetPinValue+0x5e>
    1af0:	5c c0       	rjmp	.+184    	; 0x1baa <DIO_GetPinValue+0xfe>
    1af2:	4e 81       	ldd	r20, Y+6	; 0x06
    1af4:	5f 81       	ldd	r21, Y+7	; 0x07
    1af6:	42 30       	cpi	r20, 0x02	; 2
    1af8:	51 05       	cpc	r21, r1
    1afa:	79 f1       	breq	.+94     	; 0x1b5a <DIO_GetPinValue+0xae>
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	9f 81       	ldd	r25, Y+7	; 0x07
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	91 05       	cpc	r25, r1
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <DIO_GetPinValue+0x5c>
    1b06:	3d c0       	rjmp	.+122    	; 0x1b82 <DIO_GetPinValue+0xd6>
    1b08:	50 c0       	rjmp	.+160    	; 0x1baa <DIO_GetPinValue+0xfe>
    {
    case DIO_u8PORTA:
        *Copy_u8Value = Get_Bit(PINA, Copy_u8Pin);
    1b0a:	e9 e3       	ldi	r30, 0x39	; 57
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a9 01       	movw	r20, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <DIO_GetPinValue+0x76>
    1b1e:	55 95       	asr	r21
    1b20:	47 95       	ror	r20
    1b22:	8a 95       	dec	r24
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <DIO_GetPinValue+0x72>
    1b26:	ca 01       	movw	r24, r20
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2e:	80 83       	st	Z, r24
    1b30:	3e c0       	rjmp	.+124    	; 0x1bae <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTB:
        *Copy_u8Value = Get_Bit(PINB, Copy_u8Pin);
    1b32:	e6 e3       	ldi	r30, 0x36	; 54
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a9 01       	movw	r20, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <DIO_GetPinValue+0x9e>
    1b46:	55 95       	asr	r21
    1b48:	47 95       	ror	r20
    1b4a:	8a 95       	dec	r24
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <DIO_GetPinValue+0x9a>
    1b4e:	ca 01       	movw	r24, r20
    1b50:	81 70       	andi	r24, 0x01	; 1
    1b52:	eb 81       	ldd	r30, Y+3	; 0x03
    1b54:	fc 81       	ldd	r31, Y+4	; 0x04
    1b56:	80 83       	st	Z, r24
    1b58:	2a c0       	rjmp	.+84     	; 0x1bae <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTC:
        *Copy_u8Value = Get_Bit(PINC, Copy_u8Pin);
    1b5a:	e3 e3       	ldi	r30, 0x33	; 51
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a9 01       	movw	r20, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_GetPinValue+0xc6>
    1b6e:	55 95       	asr	r21
    1b70:	47 95       	ror	r20
    1b72:	8a 95       	dec	r24
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_GetPinValue+0xc2>
    1b76:	ca 01       	movw	r24, r20
    1b78:	81 70       	andi	r24, 0x01	; 1
    1b7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b7e:	80 83       	st	Z, r24
    1b80:	16 c0       	rjmp	.+44     	; 0x1bae <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTD:
        *Copy_u8Value = Get_Bit(PIND, Copy_u8Pin);
    1b82:	e0 e3       	ldi	r30, 0x30	; 48
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	88 2f       	mov	r24, r24
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a9 01       	movw	r20, r18
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <DIO_GetPinValue+0xee>
    1b96:	55 95       	asr	r21
    1b98:	47 95       	ror	r20
    1b9a:	8a 95       	dec	r24
    1b9c:	e2 f7       	brpl	.-8      	; 0x1b96 <DIO_GetPinValue+0xea>
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	81 70       	andi	r24, 0x01	; 1
    1ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ba6:	80 83       	st	Z, r24
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <DIO_GetPinValue+0x102>
        break;

    default:
    	return NOK;
    1baa:	1d 82       	std	Y+5, r1	; 0x05
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_GetPinValue+0x106>
        break;
    }

    return OK;
    1bae:	51 e0       	ldi	r21, 0x01	; 1
    1bb0:	5d 83       	std	Y+5, r21	; 0x05
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1bb4:	27 96       	adiw	r28, 0x07	; 7
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue( u8 PORT_OUTPUT_VAL )
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01

#if SELECTED_PORT == PORT_u8_A
    PORTA = PORT_OUTPUT_VAL;
    1bd2:	eb e3       	ldi	r30, 0x3B	; 59
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	80 83       	st	Z, r24
    PORTD = PORT_OUTPUT_VAL;
#else

#endif

}
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <ADC_voidInit>:

void (*ADC_pvFunc)(void);


void ADC_voidInit()
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62

#if 	VOLTAGE_REFERENCE == AVCC
	/* REFS1 -> 0, REFS0 -> 1 */
	Set_Bit(ADMUX, ADMUX_REFS0);
    1bea:	a7 e2       	ldi	r26, 0x27	; 39
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e7 e2       	ldi	r30, 0x27	; 39
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 64       	ori	r24, 0x40	; 64
    1bf6:	8c 93       	st	X, r24
	Clear_Bit(ADMUX, ADMUX_REFS1);
    1bf8:	a7 e2       	ldi	r26, 0x27	; 39
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e7 e2       	ldi	r30, 0x27	; 39
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	8c 93       	st	X, r24
	Vref = 5;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c0c:	b0 e4       	ldi	r27, 0x40	; 64
    1c0e:	80 93 93 01 	sts	0x0193, r24
    1c12:	90 93 94 01 	sts	0x0194, r25
    1c16:	a0 93 95 01 	sts	0x0195, r26
    1c1a:	b0 93 96 01 	sts	0x0196, r27
	Clear_Bit(ADCSRA, ADCSRA_ADPS0);
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
#elif ADC_PRESCALER_SELECTION == DIVIDE_BY_128
	/* ADPS2 -> 1,  ADPS1 -> 1, ADPS0 -> 1 */
	Set_Bit(ADCSRA, ADCSRA_ADPS0);
    1c1e:	a6 e2       	ldi	r26, 0x26	; 38
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e6 e2       	ldi	r30, 0x26	; 38
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	81 60       	ori	r24, 0x01	; 1
    1c2a:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
    1c2c:	a6 e2       	ldi	r26, 0x26	; 38
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e6 e2       	ldi	r30, 0x26	; 38
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
    1c3a:	a6 e2       	ldi	r26, 0x26	; 38
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e6 e2       	ldi	r30, 0x26	; 38
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	84 60       	ori	r24, 0x04	; 4
    1c46:	8c 93       	st	X, r24
#endif

#if		ADJUSTMENT == LEFT_ADJUSTMENT
	Set_Bit(ADMUX, ADMUX_ADLAR);
#elif   ADJUSTMENT == RIGHT_ADJUSTMENT
	Clear_Bit(ADMUX, ADMUX_ADLAR);
    1c48:	a7 e2       	ldi	r26, 0x27	; 39
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e7 e2       	ldi	r30, 0x27	; 39
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 7d       	andi	r24, 0xDF	; 223
    1c54:	8c 93       	st	X, r24

#else
#error
#endif

}
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <ADC_voidEnable>:


void ADC_voidEnable()
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADEN);
    1c64:	a6 e2       	ldi	r26, 0x26	; 38
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e6 e2       	ldi	r30, 0x26	; 38
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 68       	ori	r24, 0x80	; 128
    1c70:	8c 93       	st	X, r24
}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable()
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADIE);
    1c80:	a6 e2       	ldi	r26, 0x26	; 38
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e6 e2       	ldi	r30, 0x26	; 38
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	88 60       	ori	r24, 0x08	; 8
    1c8c:	8c 93       	st	X, r24
}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <ADC_voidDisable>:

void ADC_voidDisable()
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADEN);
    1c9c:	a6 e2       	ldi	r26, 0x26	; 38
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e6 e2       	ldi	r30, 0x26	; 38
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8f 77       	andi	r24, 0x7F	; 127
    1ca8:	8c 93       	st	X, r24
}
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC()
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <ADC_u16ReadADC+0x6>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result=0;
    1cba:	1a 82       	std	Y+2, r1	; 0x02
    1cbc:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = ( ADC_10Bit * Vref) / 1024;
    1cbe:	e4 e2       	ldi	r30, 0x24	; 36
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	cc 01       	movw	r24, r24
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	20 91 93 01 	lds	r18, 0x0193
    1cdc:	30 91 94 01 	lds	r19, 0x0194
    1ce0:	40 91 95 01 	lds	r20, 0x0195
    1ce4:	50 91 96 01 	lds	r21, 0x0196
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9a 83       	std	Y+2, r25	; 0x02
    1d16:	89 83       	std	Y+1, r24	; 0x01

	return ADC_Result;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8Channel)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    1d32:	a7 e2       	ldi	r26, 0x27	; 39
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e7 e2       	ldi	r30, 0x27	; 39
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 7e       	andi	r24, 0xE0	; 224
    1d3e:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    1d40:	a7 e2       	ldi	r26, 0x27	; 39
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e7 e2       	ldi	r30, 0x27	; 39
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	90 81       	ld	r25, Z
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	89 2b       	or	r24, r25
    1d4e:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    1d50:	a6 e2       	ldi	r26, 0x26	; 38
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e6 e2       	ldi	r30, 0x26	; 38
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 64       	ori	r24, 0x40	; 64
    1d5c:	8c 93       	st	X, r24

	// Polling { Busy Waiting } until conversion complete
	while( Get_Bit(ADCSRA, ADCSRA_ADIF) == 0 );
    1d5e:	e6 e2       	ldi	r30, 0x26	; 38
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	82 95       	swap	r24
    1d66:	8f 70       	andi	r24, 0x0F	; 15
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	81 70       	andi	r24, 0x01	; 1
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	a9 f3       	breq	.-22     	; 0x1d5e <ADC_voidStartConversion+0x38>

	// Clear Conversion Flag
	Set_Bit(ADCSRA, ADCSRA_ADIF);
    1d74:	a6 e2       	ldi	r26, 0x26	; 38
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e6 e2       	ldi	r30, 0x26	; 38
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	80 61       	ori	r24, 0x10	; 16
    1d80:	8c 93       	st	X, r24

}
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 Copy_u8Channel)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	0f 92       	push	r0
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    1d96:	a7 e2       	ldi	r26, 0x27	; 39
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e7 e2       	ldi	r30, 0x27	; 39
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	80 7e       	andi	r24, 0xE0	; 224
    1da2:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    1da4:	a7 e2       	ldi	r26, 0x27	; 39
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e7 e2       	ldi	r30, 0x27	; 39
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	90 81       	ld	r25, Z
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	89 2b       	or	r24, r25
    1db2:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    1db4:	a6 e2       	ldi	r26, 0x26	; 38
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e6 e2       	ldi	r30, 0x26	; 38
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	80 64       	ori	r24, 0x40	; 64
    1dc0:	8c 93       	st	X, r24

}
    1dc2:	0f 90       	pop	r0
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <ADC_u16ReadADCInMV>:


u16 ADC_u16ReadADCInMV()
{
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <ADC_u16ReadADCInMV+0xe>
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result= 0;
    1ddc:	1a 82       	std	Y+2, r1	; 0x02
    1dde:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = (ADC_10Bit * 1000UL * (u8)Vref) / 1024UL;
    1de0:	e4 e2       	ldi	r30, 0x24	; 36
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	7c 01       	movw	r14, r24
    1dea:	00 e0       	ldi	r16, 0x00	; 0
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    1dee:	80 91 93 01 	lds	r24, 0x0193
    1df2:	90 91 94 01 	lds	r25, 0x0194
    1df6:	a0 91 95 01 	lds	r26, 0x0195
    1dfa:	b0 91 96 01 	lds	r27, 0x0196
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	c8 01       	movw	r24, r16
    1e14:	b7 01       	movw	r22, r14
    1e16:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__mulsi3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	28 ee       	ldi	r18, 0xE8	; 232
    1e20:	33 e0       	ldi	r19, 0x03	; 3
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__mulsi3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	07 2e       	mov	r0, r23
    1e34:	7a e0       	ldi	r23, 0x0A	; 10
    1e36:	b6 95       	lsr	r27
    1e38:	a7 95       	ror	r26
    1e3a:	97 95       	ror	r25
    1e3c:	87 95       	ror	r24
    1e3e:	7a 95       	dec	r23
    1e40:	d1 f7       	brne	.-12     	; 0x1e36 <ADC_u16ReadADCInMV+0x6c>
    1e42:	70 2d       	mov	r23, r0
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01

	return (u16)ADC_Result;
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	ff 90       	pop	r15
    1e5a:	ef 90       	pop	r14
    1e5c:	08 95       	ret

00001e5e <ADC_voidDisableInt>:

void ADC_voidDisableInt()
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADIE);
    1e66:	a6 e2       	ldi	r26, 0x26	; 38
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e6 e2       	ldi	r30, 0x26	; 38
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	87 7f       	andi	r24, 0xF7	; 247
    1e72:	8c 93       	st	X, r24
}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <ADC_SetCallback>:

void ADC_SetCallback( void (*ptr) (void) )
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <ADC_SetCallback+0x6>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	if( ptr != NULL )
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <ADC_SetCallback+0x22>
	{
		ADC_pvFunc = ptr;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	90 93 bc 01 	sts	0x01BC, r25
    1e98:	80 93 bb 01 	sts	0x01BB, r24
	}
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <__vector_16>:


void __vector_16(void)__attribute__((signal,used, externally_visible));
void __vector_16(void)
{
    1ea6:	1f 92       	push	r1
    1ea8:	0f 92       	push	r0
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	0f 92       	push	r0
    1eae:	11 24       	eor	r1, r1
    1eb0:	2f 93       	push	r18
    1eb2:	3f 93       	push	r19
    1eb4:	4f 93       	push	r20
    1eb6:	5f 93       	push	r21
    1eb8:	6f 93       	push	r22
    1eba:	7f 93       	push	r23
    1ebc:	8f 93       	push	r24
    1ebe:	9f 93       	push	r25
    1ec0:	af 93       	push	r26
    1ec2:	bf 93       	push	r27
    1ec4:	ef 93       	push	r30
    1ec6:	ff 93       	push	r31
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pvFunc != NULL )
    1ed0:	80 91 bb 01 	lds	r24, 0x01BB
    1ed4:	90 91 bc 01 	lds	r25, 0x01BC
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	29 f0       	breq	.+10     	; 0x1ee6 <__vector_16+0x40>
	{
		ADC_pvFunc();
    1edc:	e0 91 bb 01 	lds	r30, 0x01BB
    1ee0:	f0 91 bc 01 	lds	r31, 0x01BC
    1ee4:	09 95       	icall
	}
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	ff 91       	pop	r31
    1eec:	ef 91       	pop	r30
    1eee:	bf 91       	pop	r27
    1ef0:	af 91       	pop	r26
    1ef2:	9f 91       	pop	r25
    1ef4:	8f 91       	pop	r24
    1ef6:	7f 91       	pop	r23
    1ef8:	6f 91       	pop	r22
    1efa:	5f 91       	pop	r21
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	0f 90       	pop	r0
    1f08:	1f 90       	pop	r1
    1f0a:	18 95       	reti

00001f0c <Servo_voidInit>:

#include "ServoMotor_Interface.h"
#include "ServoMotor_Config.h"

void Servo_voidInit()
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <Servo_voidInit+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u8ICR_Value = (16000000UL) / (f32)(SERVO_FREQ * SERVO_TIMER_PRESCALER) - 1 ;
    1f16:	87 e8       	ldi	r24, 0x87	; 135
    1f18:	93 e1       	ldi	r25, 0x13	; 19
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidInit();
    1f1e:	0e 94 f7 07 	call	0xfee	; 0xfee <TIMER1_voidInit>
	TIMER1_voidSetICR(Local_u8ICR_Value);
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	0e 94 3d 08 	call	0x107a	; 0x107a <TIMER1_voidSetICR>
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <Servo_voidSetAngle>:
void Servo_voidSetAngle(u8 Copy_u8Angle)
{
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <Servo_voidSetAngle+0xe>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <Servo_voidSetAngle+0x10>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	8c 83       	std	Y+4, r24	; 0x04
	u8 Localu8TickTime = ( SERVO_TIMER_PRESCALER / 16 );
    1f4a:	84 e0       	ldi	r24, 0x04	; 4
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Angle = ( ( ((f32)Copy_u8Angle) / 180 + 1 ) * 1000UL) / Localu8TickTime - 1;
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	44 e3       	ldi	r20, 0x34	; 52
    1f6e:	53 e4       	ldi	r21, 0x43	; 67
    1f70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a e7       	ldi	r20, 0x7A	; 122
    1f96:	54 e4       	ldi	r21, 0x44	; 68
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	7c 01       	movw	r14, r24
    1fa2:	8d 01       	movw	r16, r26
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	aa 27       	eor	r26, r26
    1fac:	97 fd       	sbrc	r25, 7
    1fae:	a0 95       	com	r26
    1fb0:	ba 2f       	mov	r27, r26
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1fba:	9b 01       	movw	r18, r22
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	c8 01       	movw	r24, r16
    1fc0:	b7 01       	movw	r22, r14
    1fc2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidSetDutyCycle(Local_u16Angle);
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	0e 94 4f 08 	call	0x109e	; 0x109e <TIMER1_voidSetDutyCycle>
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	08 95       	ret

0000200c <LCD_voidInit>:
#include "LCD_Private.h"

#include "avr/delay.h"


void LCD_voidInit(){
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	cc 58       	subi	r28, 0x8C	; 140
    201a:	d0 40       	sbci	r29, 0x00	; 0
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	fe 01       	movw	r30, r28
    2028:	e7 57       	subi	r30, 0x77	; 119
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	ac e0       	ldi	r26, 0x0C	; 12
    2032:	b2 e4       	ldi	r27, 0x42	; 66
    2034:	80 83       	st	Z, r24
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	a2 83       	std	Z+2, r26	; 0x02
    203a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	8e 01       	movw	r16, r28
    203e:	0b 57       	subi	r16, 0x7B	; 123
    2040:	1f 4f       	sbci	r17, 0xFF	; 255
    2042:	fe 01       	movw	r30, r28
    2044:	e7 57       	subi	r30, 0x77	; 119
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e7       	ldi	r20, 0x7A	; 122
    2056:	55 e4       	ldi	r21, 0x45	; 69
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	f8 01       	movw	r30, r16
    2062:	80 83       	st	Z, r24
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	a2 83       	std	Z+2, r26	; 0x02
    2068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206a:	fe 01       	movw	r30, r28
    206c:	eb 57       	subi	r30, 0x7B	; 123
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	44 f4       	brge	.+16     	; 0x2098 <LCD_voidInit+0x8c>
		__ticks = 1;
    2088:	fe 01       	movw	r30, r28
    208a:	ed 57       	subi	r30, 0x7D	; 125
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	80 83       	st	Z, r24
    2096:	64 c0       	rjmp	.+200    	; 0x2160 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2098:	fe 01       	movw	r30, r28
    209a:	eb 57       	subi	r30, 0x7B	; 123
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	60 81       	ld	r22, Z
    20a0:	71 81       	ldd	r23, Z+1	; 0x01
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	3f ef       	ldi	r19, 0xFF	; 255
    20aa:	4f e7       	ldi	r20, 0x7F	; 127
    20ac:	57 e4       	ldi	r21, 0x47	; 71
    20ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b2:	18 16       	cp	r1, r24
    20b4:	0c f0       	brlt	.+2      	; 0x20b8 <LCD_voidInit+0xac>
    20b6:	43 c0       	rjmp	.+134    	; 0x213e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	fe 01       	movw	r30, r28
    20ba:	e7 57       	subi	r30, 0x77	; 119
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e2       	ldi	r20, 0x20	; 32
    20cc:	51 e4       	ldi	r21, 0x41	; 65
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8e 01       	movw	r16, r28
    20d8:	0d 57       	subi	r16, 0x7D	; 125
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	f8 01       	movw	r30, r16
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
    20ee:	1f c0       	rjmp	.+62     	; 0x212e <LCD_voidInit+0x122>
    20f0:	fe 01       	movw	r30, r28
    20f2:	ef 57       	subi	r30, 0x7F	; 127
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 e9       	ldi	r24, 0x90	; 144
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20fe:	fe 01       	movw	r30, r28
    2100:	ef 57       	subi	r30, 0x7F	; 127
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_voidInit+0xfc>
    210c:	fe 01       	movw	r30, r28
    210e:	ef 57       	subi	r30, 0x7F	; 127
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	de 01       	movw	r26, r28
    2118:	ad 57       	subi	r26, 0x7D	; 125
    211a:	bf 4f       	sbci	r27, 0xFF	; 255
    211c:	fe 01       	movw	r30, r28
    211e:	ed 57       	subi	r30, 0x7D	; 125
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	11 96       	adiw	r26, 0x01	; 1
    212a:	9c 93       	st	X, r25
    212c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	fe 01       	movw	r30, r28
    2130:	ed 57       	subi	r30, 0x7D	; 125
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	91 81       	ldd	r25, Z+1	; 0x01
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	d1 f6       	brne	.-76     	; 0x20f0 <LCD_voidInit+0xe4>
    213c:	27 c0       	rjmp	.+78     	; 0x218c <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	8e 01       	movw	r16, r28
    2140:	0d 57       	subi	r16, 0x7D	; 125
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	fe 01       	movw	r30, r28
    2146:	eb 57       	subi	r30, 0x7B	; 123
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	f8 01       	movw	r30, r16
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	80 83       	st	Z, r24
    2160:	de 01       	movw	r26, r28
    2162:	a1 58       	subi	r26, 0x81	; 129
    2164:	bf 4f       	sbci	r27, 0xFF	; 255
    2166:	fe 01       	movw	r30, r28
    2168:	ed 57       	subi	r30, 0x7D	; 125
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	8d 93       	st	X+, r24
    2172:	9c 93       	st	X, r25
    2174:	fe 01       	movw	r30, r28
    2176:	e1 58       	subi	r30, 0x81	; 129
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 81       	ld	r24, Z
    217c:	91 81       	ldd	r25, Z+1	; 0x01
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_voidInit+0x172>
    2182:	fe 01       	movw	r30, r28
    2184:	e1 58       	subi	r30, 0x81	; 129
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    218c:	80 e3       	ldi	r24, 0x30	; 48
    218e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_voidSendInitCommand>
    2192:	fe 01       	movw	r30, r28
    2194:	e5 58       	subi	r30, 0x85	; 133
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a0 ea       	ldi	r26, 0xA0	; 160
    219e:	b0 e4       	ldi	r27, 0x40	; 64
    21a0:	80 83       	st	Z, r24
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	a2 83       	std	Z+2, r26	; 0x02
    21a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	8e 01       	movw	r16, r28
    21aa:	09 58       	subi	r16, 0x89	; 137
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	fe 01       	movw	r30, r28
    21b0:	e5 58       	subi	r30, 0x85	; 133
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a e7       	ldi	r20, 0x7A	; 122
    21c2:	55 e4       	ldi	r21, 0x45	; 69
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	f8 01       	movw	r30, r16
    21ce:	80 83       	st	Z, r24
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	a2 83       	std	Z+2, r26	; 0x02
    21d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21d6:	fe 01       	movw	r30, r28
    21d8:	e9 58       	subi	r30, 0x89	; 137
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	44 f4       	brge	.+16     	; 0x2204 <LCD_voidInit+0x1f8>
		__ticks = 1;
    21f4:	fe 01       	movw	r30, r28
    21f6:	eb 58       	subi	r30, 0x8B	; 139
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
    2202:	64 c0       	rjmp	.+200    	; 0x22cc <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    2204:	fe 01       	movw	r30, r28
    2206:	e9 58       	subi	r30, 0x89	; 137
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	0c f0       	brlt	.+2      	; 0x2224 <LCD_voidInit+0x218>
    2222:	43 c0       	rjmp	.+134    	; 0x22aa <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	fe 01       	movw	r30, r28
    2226:	e5 58       	subi	r30, 0x85	; 133
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8e 01       	movw	r16, r28
    2244:	0b 58       	subi	r16, 0x8B	; 139
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	f8 01       	movw	r30, r16
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	1f c0       	rjmp	.+62     	; 0x229a <LCD_voidInit+0x28e>
    225c:	fe 01       	movw	r30, r28
    225e:	ed 58       	subi	r30, 0x8D	; 141
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 e9       	ldi	r24, 0x90	; 144
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	fe 01       	movw	r30, r28
    226c:	ed 58       	subi	r30, 0x8D	; 141
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_voidInit+0x268>
    2278:	fe 01       	movw	r30, r28
    227a:	ed 58       	subi	r30, 0x8D	; 141
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	de 01       	movw	r26, r28
    2284:	ab 58       	subi	r26, 0x8B	; 139
    2286:	bf 4f       	sbci	r27, 0xFF	; 255
    2288:	fe 01       	movw	r30, r28
    228a:	eb 58       	subi	r30, 0x8B	; 139
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	91 81       	ldd	r25, Z+1	; 0x01
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	11 96       	adiw	r26, 0x01	; 1
    2296:	9c 93       	st	X, r25
    2298:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	fe 01       	movw	r30, r28
    229c:	eb 58       	subi	r30, 0x8B	; 139
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	d1 f6       	brne	.-76     	; 0x225c <LCD_voidInit+0x250>
    22a8:	27 c0       	rjmp	.+78     	; 0x22f8 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	8e 01       	movw	r16, r28
    22ac:	0b 58       	subi	r16, 0x8B	; 139
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	fe 01       	movw	r30, r28
    22b2:	e9 58       	subi	r30, 0x89	; 137
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	f8 01       	movw	r30, r16
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	80 83       	st	Z, r24
    22cc:	de 01       	movw	r26, r28
    22ce:	af 58       	subi	r26, 0x8F	; 143
    22d0:	bf 4f       	sbci	r27, 0xFF	; 255
    22d2:	fe 01       	movw	r30, r28
    22d4:	eb 58       	subi	r30, 0x8B	; 139
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	8d 93       	st	X+, r24
    22de:	9c 93       	st	X, r25
    22e0:	fe 01       	movw	r30, r28
    22e2:	ef 58       	subi	r30, 0x8F	; 143
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_voidInit+0x2de>
    22ee:	fe 01       	movw	r30, r28
    22f0:	ef 58       	subi	r30, 0x8F	; 143
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    22f8:	80 e3       	ldi	r24, 0x30	; 48
    22fa:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_voidSendInitCommand>
    22fe:	fe 01       	movw	r30, r28
    2300:	e3 59       	subi	r30, 0x93	; 147
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e8       	ldi	r26, 0x80	; 128
    230a:	bf e3       	ldi	r27, 0x3F	; 63
    230c:	80 83       	st	Z, r24
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	a2 83       	std	Z+2, r26	; 0x02
    2312:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	8e 01       	movw	r16, r28
    2316:	07 59       	subi	r16, 0x97	; 151
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	fe 01       	movw	r30, r28
    231c:	e3 59       	subi	r30, 0x93	; 147
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a e7       	ldi	r20, 0x7A	; 122
    232e:	55 e4       	ldi	r21, 0x45	; 69
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	f8 01       	movw	r30, r16
    233a:	80 83       	st	Z, r24
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	a2 83       	std	Z+2, r26	; 0x02
    2340:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2342:	fe 01       	movw	r30, r28
    2344:	e7 59       	subi	r30, 0x97	; 151
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	44 f4       	brge	.+16     	; 0x2370 <LCD_voidInit+0x364>
		__ticks = 1;
    2360:	fe 01       	movw	r30, r28
    2362:	e9 59       	subi	r30, 0x99	; 153
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
    236e:	64 c0       	rjmp	.+200    	; 0x2438 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    2370:	fe 01       	movw	r30, r28
    2372:	e7 59       	subi	r30, 0x97	; 151
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	0c f0       	brlt	.+2      	; 0x2390 <LCD_voidInit+0x384>
    238e:	43 c0       	rjmp	.+134    	; 0x2416 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2390:	fe 01       	movw	r30, r28
    2392:	e3 59       	subi	r30, 0x93	; 147
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	60 81       	ld	r22, Z
    2398:	71 81       	ldd	r23, Z+1	; 0x01
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8e 01       	movw	r16, r28
    23b0:	09 59       	subi	r16, 0x99	; 153
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	f8 01       	movw	r30, r16
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
    23c6:	1f c0       	rjmp	.+62     	; 0x2406 <LCD_voidInit+0x3fa>
    23c8:	fe 01       	movw	r30, r28
    23ca:	eb 59       	subi	r30, 0x9B	; 155
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	80 e9       	ldi	r24, 0x90	; 144
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	fe 01       	movw	r30, r28
    23d8:	eb 59       	subi	r30, 0x9B	; 155
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <LCD_voidInit+0x3d4>
    23e4:	fe 01       	movw	r30, r28
    23e6:	eb 59       	subi	r30, 0x9B	; 155
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	de 01       	movw	r26, r28
    23f0:	a9 59       	subi	r26, 0x99	; 153
    23f2:	bf 4f       	sbci	r27, 0xFF	; 255
    23f4:	fe 01       	movw	r30, r28
    23f6:	e9 59       	subi	r30, 0x99	; 153
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	11 96       	adiw	r26, 0x01	; 1
    2402:	9c 93       	st	X, r25
    2404:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	fe 01       	movw	r30, r28
    2408:	e9 59       	subi	r30, 0x99	; 153
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	d1 f6       	brne	.-76     	; 0x23c8 <LCD_voidInit+0x3bc>
    2414:	27 c0       	rjmp	.+78     	; 0x2464 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2416:	8e 01       	movw	r16, r28
    2418:	09 59       	subi	r16, 0x99	; 153
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	fe 01       	movw	r30, r28
    241e:	e7 59       	subi	r30, 0x97	; 151
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	f8 01       	movw	r30, r16
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
    2438:	de 01       	movw	r26, r28
    243a:	ad 59       	subi	r26, 0x9D	; 157
    243c:	bf 4f       	sbci	r27, 0xFF	; 255
    243e:	fe 01       	movw	r30, r28
    2440:	e9 59       	subi	r30, 0x99	; 153
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	8d 93       	st	X+, r24
    244a:	9c 93       	st	X, r25
    244c:	fe 01       	movw	r30, r28
    244e:	ed 59       	subi	r30, 0x9D	; 157
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_voidInit+0x44a>
    245a:	fe 01       	movw	r30, r28
    245c:	ed 59       	subi	r30, 0x9D	; 157
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2464:	80 e3       	ldi	r24, 0x30	; 48
    2466:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_voidSendInitCommand>
    246a:	fe 01       	movw	r30, r28
    246c:	e1 5a       	subi	r30, 0xA1	; 161
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e8       	ldi	r26, 0x80	; 128
    2476:	bf e3       	ldi	r27, 0x3F	; 63
    2478:	80 83       	st	Z, r24
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	a2 83       	std	Z+2, r26	; 0x02
    247e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	8e 01       	movw	r16, r28
    2482:	05 5a       	subi	r16, 0xA5	; 165
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	e1 5a       	subi	r30, 0xA1	; 161
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a e7       	ldi	r20, 0x7A	; 122
    249a:	55 e4       	ldi	r21, 0x45	; 69
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ae:	fe 01       	movw	r30, r28
    24b0:	e5 5a       	subi	r30, 0xA5	; 165
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	44 f4       	brge	.+16     	; 0x24dc <LCD_voidInit+0x4d0>
		__ticks = 1;
    24cc:	fe 01       	movw	r30, r28
    24ce:	e7 5a       	subi	r30, 0xA7	; 167
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
    24da:	64 c0       	rjmp	.+200    	; 0x25a4 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    24dc:	fe 01       	movw	r30, r28
    24de:	e5 5a       	subi	r30, 0xA5	; 165
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	0c f0       	brlt	.+2      	; 0x24fc <LCD_voidInit+0x4f0>
    24fa:	43 c0       	rjmp	.+134    	; 0x2582 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	fe 01       	movw	r30, r28
    24fe:	e1 5a       	subi	r30, 0xA1	; 161
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8e 01       	movw	r16, r28
    251c:	07 5a       	subi	r16, 0xA7	; 167
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	1f c0       	rjmp	.+62     	; 0x2572 <LCD_voidInit+0x566>
    2534:	fe 01       	movw	r30, r28
    2536:	e9 5a       	subi	r30, 0xA9	; 169
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 e9       	ldi	r24, 0x90	; 144
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	fe 01       	movw	r30, r28
    2544:	e9 5a       	subi	r30, 0xA9	; 169
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_voidInit+0x540>
    2550:	fe 01       	movw	r30, r28
    2552:	e9 5a       	subi	r30, 0xA9	; 169
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	de 01       	movw	r26, r28
    255c:	a7 5a       	subi	r26, 0xA7	; 167
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e7 5a       	subi	r30, 0xA7	; 167
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	9c 93       	st	X, r25
    2570:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	fe 01       	movw	r30, r28
    2574:	e7 5a       	subi	r30, 0xA7	; 167
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	d1 f6       	brne	.-76     	; 0x2534 <LCD_voidInit+0x528>
    2580:	27 c0       	rjmp	.+78     	; 0x25d0 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	8e 01       	movw	r16, r28
    2584:	07 5a       	subi	r16, 0xA7	; 167
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	e5 5a       	subi	r30, 0xA5	; 165
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	de 01       	movw	r26, r28
    25a6:	ab 5a       	subi	r26, 0xAB	; 171
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	e7 5a       	subi	r30, 0xA7	; 167
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	8d 93       	st	X+, r24
    25b6:	9c 93       	st	X, r25
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 5a       	subi	r30, 0xAB	; 171
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <LCD_voidInit+0x5b6>
    25c6:	fe 01       	movw	r30, r28
    25c8:	eb 5a       	subi	r30, 0xAB	; 171
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    25d0:	80 e2       	ldi	r24, 0x20	; 32
    25d2:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_voidSendInitCommand>
    25d6:	fe 01       	movw	r30, r28
    25d8:	ef 5a       	subi	r30, 0xAF	; 175
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 e8       	ldi	r26, 0x80	; 128
    25e2:	bf e3       	ldi	r27, 0x3F	; 63
    25e4:	80 83       	st	Z, r24
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	a2 83       	std	Z+2, r26	; 0x02
    25ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	8e 01       	movw	r16, r28
    25ee:	03 5b       	subi	r16, 0xB3	; 179
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	fe 01       	movw	r30, r28
    25f4:	ef 5a       	subi	r30, 0xAF	; 175
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a e7       	ldi	r20, 0x7A	; 122
    2606:	55 e4       	ldi	r21, 0x45	; 69
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	f8 01       	movw	r30, r16
    2612:	80 83       	st	Z, r24
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	a2 83       	std	Z+2, r26	; 0x02
    2618:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    261a:	fe 01       	movw	r30, r28
    261c:	e3 5b       	subi	r30, 0xB3	; 179
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	44 f4       	brge	.+16     	; 0x2648 <LCD_voidInit+0x63c>
		__ticks = 1;
    2638:	fe 01       	movw	r30, r28
    263a:	e5 5b       	subi	r30, 0xB5	; 181
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	64 c0       	rjmp	.+200    	; 0x2710 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    2648:	fe 01       	movw	r30, r28
    264a:	e3 5b       	subi	r30, 0xB3	; 179
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	3f ef       	ldi	r19, 0xFF	; 255
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	57 e4       	ldi	r21, 0x47	; 71
    265e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2662:	18 16       	cp	r1, r24
    2664:	0c f0       	brlt	.+2      	; 0x2668 <LCD_voidInit+0x65c>
    2666:	43 c0       	rjmp	.+134    	; 0x26ee <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	fe 01       	movw	r30, r28
    266a:	ef 5a       	subi	r30, 0xAF	; 175
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	8e 01       	movw	r16, r28
    2688:	05 5b       	subi	r16, 0xB5	; 181
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	f8 01       	movw	r30, r16
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
    269e:	1f c0       	rjmp	.+62     	; 0x26de <LCD_voidInit+0x6d2>
    26a0:	fe 01       	movw	r30, r28
    26a2:	e7 5b       	subi	r30, 0xB7	; 183
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 e9       	ldi	r24, 0x90	; 144
    26a8:	91 e0       	ldi	r25, 0x01	; 1
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5b       	subi	r30, 0xB7	; 183
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <LCD_voidInit+0x6ac>
    26bc:	fe 01       	movw	r30, r28
    26be:	e7 5b       	subi	r30, 0xB7	; 183
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c6:	de 01       	movw	r26, r28
    26c8:	a5 5b       	subi	r26, 0xB5	; 181
    26ca:	bf 4f       	sbci	r27, 0xFF	; 255
    26cc:	fe 01       	movw	r30, r28
    26ce:	e5 5b       	subi	r30, 0xB5	; 181
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	9c 93       	st	X, r25
    26dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	fe 01       	movw	r30, r28
    26e0:	e5 5b       	subi	r30, 0xB5	; 181
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	d1 f6       	brne	.-76     	; 0x26a0 <LCD_voidInit+0x694>
    26ec:	27 c0       	rjmp	.+78     	; 0x273c <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ee:	8e 01       	movw	r16, r28
    26f0:	05 5b       	subi	r16, 0xB5	; 181
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	fe 01       	movw	r30, r28
    26f6:	e3 5b       	subi	r30, 0xB3	; 179
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	60 81       	ld	r22, Z
    26fc:	71 81       	ldd	r23, Z+1	; 0x01
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	93 81       	ldd	r25, Z+3	; 0x03
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	f8 01       	movw	r30, r16
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    2710:	de 01       	movw	r26, r28
    2712:	a9 5b       	subi	r26, 0xB9	; 185
    2714:	bf 4f       	sbci	r27, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	e5 5b       	subi	r30, 0xB5	; 181
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	8d 93       	st	X+, r24
    2722:	9c 93       	st	X, r25
    2724:	fe 01       	movw	r30, r28
    2726:	e9 5b       	subi	r30, 0xB9	; 185
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_voidInit+0x722>
    2732:	fe 01       	movw	r30, r28
    2734:	e9 5b       	subi	r30, 0xB9	; 185
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    273c:	88 e2       	ldi	r24, 0x28	; 40
    273e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
    2742:	fe 01       	movw	r30, r28
    2744:	ed 5b       	subi	r30, 0xBD	; 189
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	bf e3       	ldi	r27, 0x3F	; 63
    2750:	80 83       	st	Z, r24
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	a2 83       	std	Z+2, r26	; 0x02
    2756:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	8e 01       	movw	r16, r28
    275a:	01 5c       	subi	r16, 0xC1	; 193
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	fe 01       	movw	r30, r28
    2760:	ed 5b       	subi	r30, 0xBD	; 189
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a e7       	ldi	r20, 0x7A	; 122
    2772:	55 e4       	ldi	r21, 0x45	; 69
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	f8 01       	movw	r30, r16
    277e:	80 83       	st	Z, r24
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	a2 83       	std	Z+2, r26	; 0x02
    2784:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2786:	fe 01       	movw	r30, r28
    2788:	ff 96       	adiw	r30, 0x3f	; 63
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e8       	ldi	r20, 0x80	; 128
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    279e:	88 23       	and	r24, r24
    27a0:	2c f4       	brge	.+10     	; 0x27ac <LCD_voidInit+0x7a0>
		__ticks = 1;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9e af       	std	Y+62, r25	; 0x3e
    27a8:	8d af       	std	Y+61, r24	; 0x3d
    27aa:	46 c0       	rjmp	.+140    	; 0x2838 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    27ac:	fe 01       	movw	r30, r28
    27ae:	ff 96       	adiw	r30, 0x3f	; 63
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	3f ef       	ldi	r19, 0xFF	; 255
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	57 e4       	ldi	r21, 0x47	; 71
    27c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c4:	18 16       	cp	r1, r24
    27c6:	64 f5       	brge	.+88     	; 0x2820 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 5b       	subi	r30, 0xBD	; 189
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	60 81       	ld	r22, Z
    27d0:	71 81       	ldd	r23, Z+1	; 0x01
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	93 81       	ldd	r25, Z+3	; 0x03
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9e af       	std	Y+62, r25	; 0x3e
    27f4:	8d af       	std	Y+61, r24	; 0x3d
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <LCD_voidInit+0x80a>
    27f8:	80 e9       	ldi	r24, 0x90	; 144
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	9c af       	std	Y+60, r25	; 0x3c
    27fe:	8b af       	std	Y+59, r24	; 0x3b
    2800:	8b ad       	ldd	r24, Y+59	; 0x3b
    2802:	9c ad       	ldd	r25, Y+60	; 0x3c
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <LCD_voidInit+0x7f8>
    2808:	9c af       	std	Y+60, r25	; 0x3c
    280a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8d ad       	ldd	r24, Y+61	; 0x3d
    280e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9e af       	std	Y+62, r25	; 0x3e
    2814:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8d ad       	ldd	r24, Y+61	; 0x3d
    2818:	9e ad       	ldd	r25, Y+62	; 0x3e
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <LCD_voidInit+0x7ec>
    281e:	16 c0       	rjmp	.+44     	; 0x284c <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	fe 01       	movw	r30, r28
    2822:	ff 96       	adiw	r30, 0x3f	; 63
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e af       	std	Y+62, r25	; 0x3e
    2836:	8d af       	std	Y+61, r24	; 0x3d
    2838:	8d ad       	ldd	r24, Y+61	; 0x3d
    283a:	9e ad       	ldd	r25, Y+62	; 0x3e
    283c:	9a af       	std	Y+58, r25	; 0x3a
    283e:	89 af       	std	Y+57, r24	; 0x39
    2840:	89 ad       	ldd	r24, Y+57	; 0x39
    2842:	9a ad       	ldd	r25, Y+58	; 0x3a
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_voidInit+0x838>
    2848:	9a af       	std	Y+58, r25	; 0x3a
    284a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    284c:	88 e0       	ldi	r24, 0x08	; 8
    284e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e8       	ldi	r26, 0x80	; 128
    2858:	bf e3       	ldi	r27, 0x3F	; 63
    285a:	8d ab       	std	Y+53, r24	; 0x35
    285c:	9e ab       	std	Y+54, r25	; 0x36
    285e:	af ab       	std	Y+55, r26	; 0x37
    2860:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	6d a9       	ldd	r22, Y+53	; 0x35
    2864:	7e a9       	ldd	r23, Y+54	; 0x36
    2866:	8f a9       	ldd	r24, Y+55	; 0x37
    2868:	98 ad       	ldd	r25, Y+56	; 0x38
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a e7       	ldi	r20, 0x7A	; 122
    2870:	55 e4       	ldi	r21, 0x45	; 69
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	89 ab       	std	Y+49, r24	; 0x31
    287c:	9a ab       	std	Y+50, r25	; 0x32
    287e:	ab ab       	std	Y+51, r26	; 0x33
    2880:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2882:	69 a9       	ldd	r22, Y+49	; 0x31
    2884:	7a a9       	ldd	r23, Y+50	; 0x32
    2886:	8b a9       	ldd	r24, Y+51	; 0x33
    2888:	9c a9       	ldd	r25, Y+52	; 0x34
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <LCD_voidInit+0x898>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	98 ab       	std	Y+48, r25	; 0x30
    28a0:	8f a7       	std	Y+47, r24	; 0x2f
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    28a4:	69 a9       	ldd	r22, Y+49	; 0x31
    28a6:	7a a9       	ldd	r23, Y+50	; 0x32
    28a8:	8b a9       	ldd	r24, Y+51	; 0x33
    28aa:	9c a9       	ldd	r25, Y+52	; 0x34
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	6d a9       	ldd	r22, Y+53	; 0x35
    28be:	7e a9       	ldd	r23, Y+54	; 0x36
    28c0:	8f a9       	ldd	r24, Y+55	; 0x37
    28c2:	98 ad       	ldd	r25, Y+56	; 0x38
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	98 ab       	std	Y+48, r25	; 0x30
    28e2:	8f a7       	std	Y+47, r24	; 0x2f
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <LCD_voidInit+0x8f8>
    28e6:	80 e9       	ldi	r24, 0x90	; 144
    28e8:	91 e0       	ldi	r25, 0x01	; 1
    28ea:	9e a7       	std	Y+46, r25	; 0x2e
    28ec:	8d a7       	std	Y+45, r24	; 0x2d
    28ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_voidInit+0x8e6>
    28f6:	9e a7       	std	Y+46, r25	; 0x2e
    28f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fc:	98 a9       	ldd	r25, Y+48	; 0x30
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	98 ab       	std	Y+48, r25	; 0x30
    2902:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8f a5       	ldd	r24, Y+47	; 0x2f
    2906:	98 a9       	ldd	r25, Y+48	; 0x30
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <LCD_voidInit+0x8da>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	69 a9       	ldd	r22, Y+49	; 0x31
    2910:	7a a9       	ldd	r23, Y+50	; 0x32
    2912:	8b a9       	ldd	r24, Y+51	; 0x33
    2914:	9c a9       	ldd	r25, Y+52	; 0x34
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	98 ab       	std	Y+48, r25	; 0x30
    2920:	8f a7       	std	Y+47, r24	; 0x2f
    2922:	8f a5       	ldd	r24, Y+47	; 0x2f
    2924:	98 a9       	ldd	r25, Y+48	; 0x30
    2926:	9c a7       	std	Y+44, r25	; 0x2c
    2928:	8b a7       	std	Y+43, r24	; 0x2b
    292a:	8b a5       	ldd	r24, Y+43	; 0x2b
    292c:	9c a5       	ldd	r25, Y+44	; 0x2c
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <LCD_voidInit+0x922>
    2932:	9c a7       	std	Y+44, r25	; 0x2c
    2934:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a0 ea       	ldi	r26, 0xA0	; 160
    2942:	b0 e4       	ldi	r27, 0x40	; 64
    2944:	8f a3       	std	Y+39, r24	; 0x27
    2946:	98 a7       	std	Y+40, r25	; 0x28
    2948:	a9 a7       	std	Y+41, r26	; 0x29
    294a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294c:	6f a1       	ldd	r22, Y+39	; 0x27
    294e:	78 a5       	ldd	r23, Y+40	; 0x28
    2950:	89 a5       	ldd	r24, Y+41	; 0x29
    2952:	9a a5       	ldd	r25, Y+42	; 0x2a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a e7       	ldi	r20, 0x7A	; 122
    295a:	55 e4       	ldi	r21, 0x45	; 69
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8b a3       	std	Y+35, r24	; 0x23
    2966:	9c a3       	std	Y+36, r25	; 0x24
    2968:	ad a3       	std	Y+37, r26	; 0x25
    296a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    296c:	6b a1       	ldd	r22, Y+35	; 0x23
    296e:	7c a1       	ldd	r23, Y+36	; 0x24
    2970:	8d a1       	ldd	r24, Y+37	; 0x25
    2972:	9e a1       	ldd	r25, Y+38	; 0x26
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2980:	88 23       	and	r24, r24
    2982:	2c f4       	brge	.+10     	; 0x298e <LCD_voidInit+0x982>
		__ticks = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9a a3       	std	Y+34, r25	; 0x22
    298a:	89 a3       	std	Y+33, r24	; 0x21
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    298e:	6b a1       	ldd	r22, Y+35	; 0x23
    2990:	7c a1       	ldd	r23, Y+36	; 0x24
    2992:	8d a1       	ldd	r24, Y+37	; 0x25
    2994:	9e a1       	ldd	r25, Y+38	; 0x26
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	4c f5       	brge	.+82     	; 0x29f8 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	6f a1       	ldd	r22, Y+39	; 0x27
    29a8:	78 a5       	ldd	r23, Y+40	; 0x28
    29aa:	89 a5       	ldd	r24, Y+41	; 0x29
    29ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9a a3       	std	Y+34, r25	; 0x22
    29cc:	89 a3       	std	Y+33, r24	; 0x21
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <LCD_voidInit+0x9e2>
    29d0:	80 e9       	ldi	r24, 0x90	; 144
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	98 a3       	std	Y+32, r25	; 0x20
    29d6:	8f 8f       	std	Y+31, r24	; 0x1f
    29d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29da:	98 a1       	ldd	r25, Y+32	; 0x20
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <LCD_voidInit+0x9d0>
    29e0:	98 a3       	std	Y+32, r25	; 0x20
    29e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e4:	89 a1       	ldd	r24, Y+33	; 0x21
    29e6:	9a a1       	ldd	r25, Y+34	; 0x22
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ee:	89 a1       	ldd	r24, Y+33	; 0x21
    29f0:	9a a1       	ldd	r25, Y+34	; 0x22
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <LCD_voidInit+0x9c4>
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9a a3       	std	Y+34, r25	; 0x22
    2a0a:	89 a3       	std	Y+33, r24	; 0x21
    2a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a10:	9e 8f       	std	Y+30, r25	; 0x1e
    2a12:	8d 8f       	std	Y+29, r24	; 0x1d
    2a14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <LCD_voidInit+0xa0c>
    2a1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    2a20:	8c e0       	ldi	r24, 0x0C	; 12
    2a22:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a0 e8       	ldi	r26, 0x80	; 128
    2a2c:	bf e3       	ldi	r27, 0x3F	; 63
    2a2e:	89 8f       	std	Y+25, r24	; 0x19
    2a30:	9a 8f       	std	Y+26, r25	; 0x1a
    2a32:	ab 8f       	std	Y+27, r26	; 0x1b
    2a34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	69 8d       	ldd	r22, Y+25	; 0x19
    2a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a e7       	ldi	r20, 0x7A	; 122
    2a44:	55 e4       	ldi	r21, 0x45	; 69
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8d 8b       	std	Y+21, r24	; 0x15
    2a50:	9e 8b       	std	Y+22, r25	; 0x16
    2a52:	af 8b       	std	Y+23, r26	; 0x17
    2a54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a56:	6d 89       	ldd	r22, Y+21	; 0x15
    2a58:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <LCD_voidInit+0xa6c>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9c 8b       	std	Y+20, r25	; 0x14
    2a74:	8b 8b       	std	Y+19, r24	; 0x13
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    2a78:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	69 8d       	ldd	r22, Y+25	; 0x19
    2a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9c 8b       	std	Y+20, r25	; 0x14
    2ab6:	8b 8b       	std	Y+19, r24	; 0x13
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <LCD_voidInit+0xacc>
    2aba:	80 e9       	ldi	r24, 0x90	; 144
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	9a 8b       	std	Y+18, r25	; 0x12
    2ac0:	89 8b       	std	Y+17, r24	; 0x11
    2ac2:	89 89       	ldd	r24, Y+17	; 0x11
    2ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_voidInit+0xaba>
    2aca:	9a 8b       	std	Y+18, r25	; 0x12
    2acc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9c 8b       	std	Y+20, r25	; 0x14
    2ad6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ada:	9c 89       	ldd	r25, Y+20	; 0x14
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <LCD_voidInit+0xaae>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9c 8b       	std	Y+20, r25	; 0x14
    2af4:	8b 8b       	std	Y+19, r24	; 0x13
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	98 8b       	std	Y+16, r25	; 0x10
    2afc:	8f 87       	std	Y+15, r24	; 0x0f
    2afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b00:	98 89       	ldd	r25, Y+16	; 0x10
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_voidInit+0xaf6>
    2b06:	98 8b       	std	Y+16, r25	; 0x10
    2b08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    2b0a:	86 e0       	ldi	r24, 0x06	; 6
    2b0c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	a0 e8       	ldi	r26, 0x80	; 128
    2b16:	bf e3       	ldi	r27, 0x3F	; 63
    2b18:	8b 87       	std	Y+11, r24	; 0x0b
    2b1a:	9c 87       	std	Y+12, r25	; 0x0c
    2b1c:	ad 87       	std	Y+13, r26	; 0x0d
    2b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	4a e7       	ldi	r20, 0x7A	; 122
    2b2e:	55 e4       	ldi	r21, 0x45	; 69
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	8f 83       	std	Y+7, r24	; 0x07
    2b3a:	98 87       	std	Y+8, r25	; 0x08
    2b3c:	a9 87       	std	Y+9, r26	; 0x09
    2b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b40:	6f 81       	ldd	r22, Y+7	; 0x07
    2b42:	78 85       	ldd	r23, Y+8	; 0x08
    2b44:	89 85       	ldd	r24, Y+9	; 0x09
    2b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e8       	ldi	r20, 0x80	; 128
    2b4e:	5f e3       	ldi	r21, 0x3F	; 63
    2b50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b54:	88 23       	and	r24, r24
    2b56:	2c f4       	brge	.+10     	; 0x2b62 <LCD_voidInit+0xb56>
		__ticks = 1;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
    2b60:	3f c0       	rjmp	.+126    	; 0x2be0 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    2b62:	6f 81       	ldd	r22, Y+7	; 0x07
    2b64:	78 85       	ldd	r23, Y+8	; 0x08
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	3f ef       	ldi	r19, 0xFF	; 255
    2b6e:	4f e7       	ldi	r20, 0x7F	; 127
    2b70:	57 e4       	ldi	r21, 0x47	; 71
    2b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b76:	18 16       	cp	r1, r24
    2b78:	4c f5       	brge	.+82     	; 0x2bcc <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	51 e4       	ldi	r21, 0x41	; 65
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	0f c0       	rjmp	.+30     	; 0x2bc2 <LCD_voidInit+0xbb6>
    2ba4:	80 e9       	ldi	r24, 0x90	; 144
    2ba6:	91 e0       	ldi	r25, 0x01	; 1
    2ba8:	9c 83       	std	Y+4, r25	; 0x04
    2baa:	8b 83       	std	Y+3, r24	; 0x03
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_voidInit+0xba4>
    2bb4:	9c 83       	std	Y+4, r25	; 0x04
    2bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	69 f7       	brne	.-38     	; 0x2ba4 <LCD_voidInit+0xb98>
    2bca:	14 c0       	rjmp	.+40     	; 0x2bf4 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	9e 83       	std	Y+6, r25	; 0x06
    2bde:	8d 83       	std	Y+5, r24	; 0x05
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
    2be2:	9e 81       	ldd	r25, Y+6	; 0x06
    2be4:	9a 83       	std	Y+2, r25	; 0x02
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	9a 81       	ldd	r25, Y+2	; 0x02
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_voidInit+0xbe0>
    2bf0:	9a 83       	std	Y+2, r25	; 0x02
    2bf2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2bf4:	c4 57       	subi	r28, 0x74	; 116
    2bf6:	df 4f       	sbci	r29, 0xFF	; 255
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	08 95       	ret

00002c0c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	2f 97       	sbiw	r28, 0x0f	; 15
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	63 e0       	ldi	r22, 0x03	; 3
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	62 e0       	ldi	r22, 0x02	; 2
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(command, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(command, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(command, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(command, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    2c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c38:	82 95       	swap	r24
    2c3a:	8f 70       	andi	r24, 0x0F	; 15
    2c3c:	98 2f       	mov	r25, r24
    2c3e:	91 70       	andi	r25, 0x01	; 1
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	49 2f       	mov	r20, r25
    2c46:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    2c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c4c:	82 95       	swap	r24
    2c4e:	86 95       	lsr	r24
    2c50:	87 70       	andi	r24, 0x07	; 7
    2c52:	98 2f       	mov	r25, r24
    2c54:	91 70       	andi	r25, 0x01	; 1
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	49 2f       	mov	r20, r25
    2c5c:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    2c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c62:	82 95       	swap	r24
    2c64:	86 95       	lsr	r24
    2c66:	86 95       	lsr	r24
    2c68:	83 70       	andi	r24, 0x03	; 3
    2c6a:	98 2f       	mov	r25, r24
    2c6c:	91 70       	andi	r25, 0x01	; 1
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	63 e0       	ldi	r22, 0x03	; 3
    2c72:	49 2f       	mov	r20, r25
    2c74:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    2c78:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	99 27       	eor	r25, r25
    2c80:	99 1f       	adc	r25, r25
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	64 e0       	ldi	r22, 0x04	; 4
    2c86:	49 2f       	mov	r20, r25
    2c88:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	62 e0       	ldi	r22, 0x02	; 2
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	62 e0       	ldi	r22, 0x02	; 2
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 0));
    2ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca2:	98 2f       	mov	r25, r24
    2ca4:	91 70       	andi	r25, 0x01	; 1
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	49 2f       	mov	r20, r25
    2cac:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 1));
    2cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb2:	86 95       	lsr	r24
    2cb4:	98 2f       	mov	r25, r24
    2cb6:	91 70       	andi	r25, 0x01	; 1
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	61 e0       	ldi	r22, 0x01	; 1
    2cbc:	49 2f       	mov	r20, r25
    2cbe:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 2));
    2cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc4:	86 95       	lsr	r24
    2cc6:	86 95       	lsr	r24
    2cc8:	98 2f       	mov	r25, r24
    2cca:	91 70       	andi	r25, 0x01	; 1
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	63 e0       	ldi	r22, 0x03	; 3
    2cd0:	49 2f       	mov	r20, r25
    2cd2:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 3));
    2cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd8:	86 95       	lsr	r24
    2cda:	86 95       	lsr	r24
    2cdc:	86 95       	lsr	r24
    2cde:	98 2f       	mov	r25, r24
    2ce0:	91 70       	andi	r25, 0x01	; 1
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	64 e0       	ldi	r22, 0x04	; 4
    2ce6:	49 2f       	mov	r20, r25
    2ce8:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	62 e0       	ldi	r22, 0x02	; 2
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 ea       	ldi	r26, 0xA0	; 160
    2cfc:	b0 e4       	ldi	r27, 0x40	; 64
    2cfe:	8b 87       	std	Y+11, r24	; 0x0b
    2d00:	9c 87       	std	Y+12, r25	; 0x0c
    2d02:	ad 87       	std	Y+13, r26	; 0x0d
    2d04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4a e7       	ldi	r20, 0x7A	; 122
    2d14:	55 e4       	ldi	r21, 0x45	; 69
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8f 83       	std	Y+7, r24	; 0x07
    2d20:	98 87       	std	Y+8, r25	; 0x08
    2d22:	a9 87       	std	Y+9, r26	; 0x09
    2d24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9e 83       	std	Y+6, r25	; 0x06
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	3f c0       	rjmp	.+126    	; 0x2dc6 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	3f ef       	ldi	r19, 0xFF	; 255
    2d54:	4f e7       	ldi	r20, 0x7F	; 127
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d5c:	18 16       	cp	r1, r24
    2d5e:	4c f5       	brge	.+82     	; 0x2db2 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <LCD_voidSendCommand+0x19c>
    2d8a:	80 e9       	ldi	r24, 0x90	; 144
    2d8c:	91 e0       	ldi	r25, 0x01	; 1
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
    2d90:	8b 83       	std	Y+3, r24	; 0x03
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	9c 81       	ldd	r25, Y+4	; 0x04
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_voidSendCommand+0x18a>
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da8:	8d 81       	ldd	r24, Y+5	; 0x05
    2daa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <LCD_voidSendCommand+0x17e>
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db2:	6f 81       	ldd	r22, Y+7	; 0x07
    2db4:	78 85       	ldd	r23, Y+8	; 0x08
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9e 83       	std	Y+6, r25	; 0x06
    2dc4:	8d 83       	std	Y+5, r24	; 0x05
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_voidSendCommand+0x1c6>
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    2dda:	2f 96       	adiw	r28, 0x0f	; 15
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	2f 97       	sbiw	r28, 0x0f	; 15
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	63 e0       	ldi	r22, 0x03	; 3
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	62 e0       	ldi	r22, 0x02	; 2
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    2e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e18:	82 95       	swap	r24
    2e1a:	8f 70       	andi	r24, 0x0F	; 15
    2e1c:	98 2f       	mov	r25, r24
    2e1e:	91 70       	andi	r25, 0x01	; 1
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	49 2f       	mov	r20, r25
    2e26:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    2e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2c:	82 95       	swap	r24
    2e2e:	86 95       	lsr	r24
    2e30:	87 70       	andi	r24, 0x07	; 7
    2e32:	98 2f       	mov	r25, r24
    2e34:	91 70       	andi	r25, 0x01	; 1
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	61 e0       	ldi	r22, 0x01	; 1
    2e3a:	49 2f       	mov	r20, r25
    2e3c:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    2e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e42:	82 95       	swap	r24
    2e44:	86 95       	lsr	r24
    2e46:	86 95       	lsr	r24
    2e48:	83 70       	andi	r24, 0x03	; 3
    2e4a:	98 2f       	mov	r25, r24
    2e4c:	91 70       	andi	r25, 0x01	; 1
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	63 e0       	ldi	r22, 0x03	; 3
    2e52:	49 2f       	mov	r20, r25
    2e54:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    2e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	99 27       	eor	r25, r25
    2e60:	99 1f       	adc	r25, r25
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	64 e0       	ldi	r22, 0x04	; 4
    2e66:	49 2f       	mov	r20, r25
    2e68:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	62 e0       	ldi	r22, 0x02	; 2
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 ea       	ldi	r26, 0xA0	; 160
    2e7c:	b0 e4       	ldi	r27, 0x40	; 64
    2e7e:	8b 87       	std	Y+11, r24	; 0x0b
    2e80:	9c 87       	std	Y+12, r25	; 0x0c
    2e82:	ad 87       	std	Y+13, r26	; 0x0d
    2e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	4a e7       	ldi	r20, 0x7A	; 122
    2e94:	55 e4       	ldi	r21, 0x45	; 69
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	8f 83       	std	Y+7, r24	; 0x07
    2ea0:	98 87       	std	Y+8, r25	; 0x08
    2ea2:	a9 87       	std	Y+9, r26	; 0x09
    2ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea8:	78 85       	ldd	r23, Y+8	; 0x08
    2eaa:	89 85       	ldd	r24, Y+9	; 0x09
    2eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	2c f4       	brge	.+10     	; 0x2ec8 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
    2ec6:	3f c0       	rjmp	.+126    	; 0x2f46 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	4f e7       	ldi	r20, 0x7F	; 127
    2ed6:	57 e4       	ldi	r21, 0x47	; 71
    2ed8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2edc:	18 16       	cp	r1, r24
    2ede:	4c f5       	brge	.+82     	; 0x2f32 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e2       	ldi	r20, 0x20	; 32
    2eee:	51 e4       	ldi	r21, 0x41	; 65
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <LCD_voidSendInitCommand+0x13c>
    2f0a:	80 e9       	ldi	r24, 0x90	; 144
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	9c 83       	std	Y+4, r25	; 0x04
    2f10:	8b 83       	std	Y+3, r24	; 0x03
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	9c 81       	ldd	r25, Y+4	; 0x04
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <LCD_voidSendInitCommand+0x12a>
    2f1a:	9c 83       	std	Y+4, r25	; 0x04
    2f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	9e 81       	ldd	r25, Y+6	; 0x06
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	9e 83       	std	Y+6, r25	; 0x06
    2f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	69 f7       	brne	.-38     	; 0x2f0a <LCD_voidSendInitCommand+0x11e>
    2f30:	14 c0       	rjmp	.+40     	; 0x2f5a <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f32:	6f 81       	ldd	r22, Y+7	; 0x07
    2f34:	78 85       	ldd	r23, Y+8	; 0x08
    2f36:	89 85       	ldd	r24, Y+9	; 0x09
    2f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9e 83       	std	Y+6, r25	; 0x06
    2f44:	8d 83       	std	Y+5, r24	; 0x05
    2f46:	8d 81       	ldd	r24, Y+5	; 0x05
    2f48:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4a:	9a 83       	std	Y+2, r25	; 0x02
    2f4c:	89 83       	std	Y+1, r24	; 0x01
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	9a 81       	ldd	r25, Y+2	; 0x02
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <LCD_voidSendInitCommand+0x166>
    2f56:	9a 83       	std	Y+2, r25	; 0x02
    2f58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2f5a:	2f 96       	adiw	r28, 0x0f	; 15
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	2f 97       	sbiw	r28, 0x0f	; 15
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_HIGH); //RS = 0
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	63 e0       	ldi	r22, 0x03	; 3
    2f86:	41 e0       	ldi	r20, 0x01	; 1
    2f88:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	62 e0       	ldi	r22, 0x02	; 2
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(data, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(data, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(data, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(data, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 4));
    2f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f98:	82 95       	swap	r24
    2f9a:	8f 70       	andi	r24, 0x0F	; 15
    2f9c:	98 2f       	mov	r25, r24
    2f9e:	91 70       	andi	r25, 0x01	; 1
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	60 e0       	ldi	r22, 0x00	; 0
    2fa4:	49 2f       	mov	r20, r25
    2fa6:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 5));
    2faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fac:	82 95       	swap	r24
    2fae:	86 95       	lsr	r24
    2fb0:	87 70       	andi	r24, 0x07	; 7
    2fb2:	98 2f       	mov	r25, r24
    2fb4:	91 70       	andi	r25, 0x01	; 1
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	61 e0       	ldi	r22, 0x01	; 1
    2fba:	49 2f       	mov	r20, r25
    2fbc:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 6));
    2fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc2:	82 95       	swap	r24
    2fc4:	86 95       	lsr	r24
    2fc6:	86 95       	lsr	r24
    2fc8:	83 70       	andi	r24, 0x03	; 3
    2fca:	98 2f       	mov	r25, r24
    2fcc:	91 70       	andi	r25, 0x01	; 1
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	63 e0       	ldi	r22, 0x03	; 3
    2fd2:	49 2f       	mov	r20, r25
    2fd4:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 7));
    2fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fda:	98 2f       	mov	r25, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	99 27       	eor	r25, r25
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	64 e0       	ldi	r22, 0x04	; 4
    2fe6:	49 2f       	mov	r20, r25
    2fe8:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	62 e0       	ldi	r22, 0x02	; 2
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	62 e0       	ldi	r22, 0x02	; 2
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 0));
    3000:	8f 85       	ldd	r24, Y+15	; 0x0f
    3002:	98 2f       	mov	r25, r24
    3004:	91 70       	andi	r25, 0x01	; 1
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	49 2f       	mov	r20, r25
    300c:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 1));
    3010:	8f 85       	ldd	r24, Y+15	; 0x0f
    3012:	86 95       	lsr	r24
    3014:	98 2f       	mov	r25, r24
    3016:	91 70       	andi	r25, 0x01	; 1
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	49 2f       	mov	r20, r25
    301e:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 2));
    3022:	8f 85       	ldd	r24, Y+15	; 0x0f
    3024:	86 95       	lsr	r24
    3026:	86 95       	lsr	r24
    3028:	98 2f       	mov	r25, r24
    302a:	91 70       	andi	r25, 0x01	; 1
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	63 e0       	ldi	r22, 0x03	; 3
    3030:	49 2f       	mov	r20, r25
    3032:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 3));
    3036:	8f 85       	ldd	r24, Y+15	; 0x0f
    3038:	86 95       	lsr	r24
    303a:	86 95       	lsr	r24
    303c:	86 95       	lsr	r24
    303e:	98 2f       	mov	r25, r24
    3040:	91 70       	andi	r25, 0x01	; 1
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	64 e0       	ldi	r22, 0x04	; 4
    3046:	49 2f       	mov	r20, r25
    3048:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	62 e0       	ldi	r22, 0x02	; 2
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	a0 ea       	ldi	r26, 0xA0	; 160
    305c:	b0 e4       	ldi	r27, 0x40	; 64
    305e:	8b 87       	std	Y+11, r24	; 0x0b
    3060:	9c 87       	std	Y+12, r25	; 0x0c
    3062:	ad 87       	std	Y+13, r26	; 0x0d
    3064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3066:	6b 85       	ldd	r22, Y+11	; 0x0b
    3068:	7c 85       	ldd	r23, Y+12	; 0x0c
    306a:	8d 85       	ldd	r24, Y+13	; 0x0d
    306c:	9e 85       	ldd	r25, Y+14	; 0x0e
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a e7       	ldi	r20, 0x7A	; 122
    3074:	55 e4       	ldi	r21, 0x45	; 69
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8f 83       	std	Y+7, r24	; 0x07
    3080:	98 87       	std	Y+8, r25	; 0x08
    3082:	a9 87       	std	Y+9, r26	; 0x09
    3084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e8       	ldi	r20, 0x80	; 128
    3094:	5f e3       	ldi	r21, 0x3F	; 63
    3096:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    309a:	88 23       	and	r24, r24
    309c:	2c f4       	brge	.+10     	; 0x30a8 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9e 83       	std	Y+6, r25	; 0x06
    30a4:	8d 83       	std	Y+5, r24	; 0x05
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	4f e7       	ldi	r20, 0x7F	; 127
    30b6:	57 e4       	ldi	r21, 0x47	; 71
    30b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30bc:	18 16       	cp	r1, r24
    30be:	4c f5       	brge	.+82     	; 0x3112 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	0f c0       	rjmp	.+30     	; 0x3108 <LCD_voidWriteChar+0x19c>
    30ea:	80 e9       	ldi	r24, 0x90	; 144
    30ec:	91 e0       	ldi	r25, 0x01	; 1
    30ee:	9c 83       	std	Y+4, r25	; 0x04
    30f0:	8b 83       	std	Y+3, r24	; 0x03
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <LCD_voidWriteChar+0x18a>
    30fa:	9c 83       	std	Y+4, r25	; 0x04
    30fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	69 f7       	brne	.-38     	; 0x30ea <LCD_voidWriteChar+0x17e>
    3110:	14 c0       	rjmp	.+40     	; 0x313a <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3112:	6f 81       	ldd	r22, Y+7	; 0x07
    3114:	78 85       	ldd	r23, Y+8	; 0x08
    3116:	89 85       	ldd	r24, Y+9	; 0x09
    3118:	9a 85       	ldd	r25, Y+10	; 0x0a
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	8d 81       	ldd	r24, Y+5	; 0x05
    3128:	9e 81       	ldd	r25, Y+6	; 0x06
    312a:	9a 83       	std	Y+2, r25	; 0x02
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <LCD_voidWriteChar+0x1c6>
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    313a:	2f 96       	adiw	r28, 0x0f	; 15
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

0000314c <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	00 d0       	rcall	.+0      	; 0x3152 <LCD_voidWriteString+0x6>
    3152:	0f 92       	push	r0
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
    3158:	9b 83       	std	Y+3, r25	; 0x03
    315a:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    315c:	19 82       	std	Y+1, r1	; 0x01
    315e:	0e c0       	rjmp	.+28     	; 0x317c <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	9b 81       	ldd	r25, Y+3	; 0x03
    316a:	fc 01       	movw	r30, r24
    316c:	e2 0f       	add	r30, r18
    316e:	f3 1f       	adc	r31, r19
    3170:	80 81       	ld	r24, Z
    3172:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
		index++;
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	8f 5f       	subi	r24, 0xFF	; 255
    317a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	28 2f       	mov	r18, r24
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	8a 81       	ldd	r24, Y+2	; 0x02
    3184:	9b 81       	ldd	r25, Y+3	; 0x03
    3186:	fc 01       	movw	r30, r24
    3188:	e2 0f       	add	r30, r18
    318a:	f3 1f       	adc	r31, r19
    318c:	80 81       	ld	r24, Z
    318e:	88 23       	and	r24, r24
    3190:	39 f7       	brne	.-50     	; 0x3160 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	2e 97       	sbiw	r28, 0x0e	; 14
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
    31b6:	69 87       	std	Y+9, r22	; 0x09
    31b8:	7a 87       	std	Y+10, r23	; 0x0a
    31ba:	8b 87       	std	Y+11, r24	; 0x0b
    31bc:	9c 87       	std	Y+12, r25	; 0x0c
    31be:	5e 87       	std	Y+14, r21	; 0x0e
    31c0:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    31c2:	1d 82       	std	Y+5, r1	; 0x05
    31c4:	1e 82       	std	Y+6, r1	; 0x06
    31c6:	1f 82       	std	Y+7, r1	; 0x07
    31c8:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    31ca:	83 e1       	ldi	r24, 0x13	; 19
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 e0       	ldi	r26, 0x00	; 0
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	ab 83       	std	Y+3, r26	; 0x03
    31d8:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    31da:	29 81       	ldd	r18, Y+1	; 0x01
    31dc:	3a 81       	ldd	r19, Y+2	; 0x02
    31de:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e2:	fc 01       	movw	r30, r24
    31e4:	e2 0f       	add	r30, r18
    31e6:	f3 1f       	adc	r31, r19
    31e8:	10 82       	st	Z, r1
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	9a 81       	ldd	r25, Y+2	; 0x02
    31ee:	ab 81       	ldd	r26, Y+3	; 0x03
    31f0:	bc 81       	ldd	r27, Y+4	; 0x04
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	a1 09       	sbc	r26, r1
    31f6:	b1 09       	sbc	r27, r1
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	ab 83       	std	Y+3, r26	; 0x03
    31fe:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	ab 85       	ldd	r26, Y+11	; 0x0b
    3206:	bc 85       	ldd	r27, Y+12	; 0x0c
    3208:	bb 23       	and	r27, r27
    320a:	0c f0       	brlt	.+2      	; 0x320e <IntToString+0x70>
    320c:	4d c0       	rjmp	.+154    	; 0x32a8 <IntToString+0x10a>
		flag = 1;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	a0 e0       	ldi	r26, 0x00	; 0
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	af 83       	std	Y+7, r26	; 0x07
    321c:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	ab 85       	ldd	r26, Y+11	; 0x0b
    3224:	bc 85       	ldd	r27, Y+12	; 0x0c
    3226:	b0 95       	com	r27
    3228:	a0 95       	com	r26
    322a:	90 95       	com	r25
    322c:	81 95       	neg	r24
    322e:	9f 4f       	sbci	r25, 0xFF	; 255
    3230:	af 4f       	sbci	r26, 0xFF	; 255
    3232:	bf 4f       	sbci	r27, 0xFF	; 255
    3234:	89 87       	std	Y+9, r24	; 0x09
    3236:	9a 87       	std	Y+10, r25	; 0x0a
    3238:	ab 87       	std	Y+11, r26	; 0x0b
    323a:	bc 87       	std	Y+12, r27	; 0x0c
    323c:	35 c0       	rjmp	.+106    	; 0x32a8 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    323e:	29 81       	ldd	r18, Y+1	; 0x01
    3240:	3a 81       	ldd	r19, Y+2	; 0x02
    3242:	8d 85       	ldd	r24, Y+13	; 0x0d
    3244:	9e 85       	ldd	r25, Y+14	; 0x0e
    3246:	8c 01       	movw	r16, r24
    3248:	02 0f       	add	r16, r18
    324a:	13 1f       	adc	r17, r19
    324c:	89 85       	ldd	r24, Y+9	; 0x09
    324e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3250:	ab 85       	ldd	r26, Y+11	; 0x0b
    3252:	bc 85       	ldd	r27, Y+12	; 0x0c
    3254:	2a e0       	ldi	r18, 0x0A	; 10
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__divmodsi4>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	80 5d       	subi	r24, 0xD0	; 208
    326a:	f8 01       	movw	r30, r16
    326c:	80 83       	st	Z, r24
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	9a 81       	ldd	r25, Y+2	; 0x02
    3272:	ab 81       	ldd	r26, Y+3	; 0x03
    3274:	bc 81       	ldd	r27, Y+4	; 0x04
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	a1 09       	sbc	r26, r1
    327a:	b1 09       	sbc	r27, r1
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	9a 83       	std	Y+2, r25	; 0x02
    3280:	ab 83       	std	Y+3, r26	; 0x03
    3282:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	ab 85       	ldd	r26, Y+11	; 0x0b
    328a:	bc 85       	ldd	r27, Y+12	; 0x0c
    328c:	2a e0       	ldi	r18, 0x0A	; 10
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__divmodsi4>
    329c:	da 01       	movw	r26, r20
    329e:	c9 01       	movw	r24, r18
    32a0:	89 87       	std	Y+9, r24	; 0x09
    32a2:	9a 87       	std	Y+10, r25	; 0x0a
    32a4:	ab 87       	std	Y+11, r26	; 0x0b
    32a6:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    32a8:	89 85       	ldd	r24, Y+9	; 0x09
    32aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    32ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	a1 05       	cpc	r26, r1
    32b4:	b1 05       	cpc	r27, r1
    32b6:	19 f6       	brne	.-122    	; 0x323e <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    32b8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ba:	9e 81       	ldd	r25, Y+6	; 0x06
    32bc:	af 81       	ldd	r26, Y+7	; 0x07
    32be:	b8 85       	ldd	r27, Y+8	; 0x08
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	a1 05       	cpc	r26, r1
    32c4:	b1 05       	cpc	r27, r1
    32c6:	a1 f0       	breq	.+40     	; 0x32f0 <IntToString+0x152>
		str[i--] = '-';
    32c8:	29 81       	ldd	r18, Y+1	; 0x01
    32ca:	3a 81       	ldd	r19, Y+2	; 0x02
    32cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d0:	fc 01       	movw	r30, r24
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	8d e2       	ldi	r24, 0x2D	; 45
    32d8:	80 83       	st	Z, r24
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	ab 81       	ldd	r26, Y+3	; 0x03
    32e0:	bc 81       	ldd	r27, Y+4	; 0x04
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	a1 09       	sbc	r26, r1
    32e6:	b1 09       	sbc	r27, r1
    32e8:	89 83       	std	Y+1, r24	; 0x01
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	ab 83       	std	Y+3, r26	; 0x03
    32ee:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	9a 81       	ldd	r25, Y+2	; 0x02
    32f4:	ab 81       	ldd	r26, Y+3	; 0x03
    32f6:	bc 81       	ldd	r27, Y+4	; 0x04
    32f8:	01 96       	adiw	r24, 0x01	; 1
    32fa:	a1 1d       	adc	r26, r1
    32fc:	b1 1d       	adc	r27, r1
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	9a 83       	std	Y+2, r25	; 0x02
    3302:	ab 83       	std	Y+3, r26	; 0x03
    3304:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    3306:	29 81       	ldd	r18, Y+1	; 0x01
    3308:	3a 81       	ldd	r19, Y+2	; 0x02
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	82 0f       	add	r24, r18
    3310:	93 1f       	adc	r25, r19

}
    3312:	2e 96       	adiw	r28, 0x0e	; 14
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	08 95       	ret

00003328 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	6a 97       	sbiw	r28, 0x1a	; 26
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	6f 8b       	std	Y+23, r22	; 0x17
    333e:	78 8f       	std	Y+24, r23	; 0x18
    3340:	89 8f       	std	Y+25, r24	; 0x19
    3342:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    3344:	8f 89       	ldd	r24, Y+23	; 0x17
    3346:	98 8d       	ldd	r25, Y+24	; 0x18
    3348:	a9 8d       	ldd	r26, Y+25	; 0x19
    334a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	a1 05       	cpc	r26, r1
    3350:	b1 05       	cpc	r27, r1
    3352:	99 f0       	breq	.+38     	; 0x337a <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    3354:	8f 89       	ldd	r24, Y+23	; 0x17
    3356:	98 8d       	ldd	r25, Y+24	; 0x18
    3358:	a9 8d       	ldd	r26, Y+25	; 0x19
    335a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    335c:	9e 01       	movw	r18, r28
    335e:	2d 5f       	subi	r18, 0xFD	; 253
    3360:	3f 4f       	sbci	r19, 0xFF	; 255
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	a9 01       	movw	r20, r18
    3368:	0e 94 cf 18 	call	0x319e	; 0x319e <IntToString>
    336c:	9a 83       	std	Y+2, r25	; 0x02
    336e:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	0e 94 a6 18 	call	0x314c	; 0x314c <LCD_voidWriteString>
    3378:	03 c0       	rjmp	.+6      	; 0x3380 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    337a:	80 e3       	ldi	r24, 0x30	; 48
    337c:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
	}
}
    3380:	6a 96       	adiw	r28, 0x1a	; 26
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	a6 97       	sbiw	r28, 0x26	; 38
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	6b a3       	std	Y+35, r22	; 0x23
    33a8:	7c a3       	std	Y+36, r23	; 0x24
    33aa:	8d a3       	std	Y+37, r24	; 0x25
    33ac:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    33ae:	6b a1       	ldd	r22, Y+35	; 0x23
    33b0:	7c a1       	ldd	r23, Y+36	; 0x24
    33b2:	8d a1       	ldd	r24, Y+37	; 0x25
    33b4:	9e a1       	ldd	r25, Y+38	; 0x26
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	48 ec       	ldi	r20, 0xC8	; 200
    33bc:	52 e4       	ldi	r21, 0x42	; 66
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	8b 87       	std	Y+11, r24	; 0x0b
    33d4:	9c 87       	std	Y+12, r25	; 0x0c
    33d6:	ad 87       	std	Y+13, r26	; 0x0d
    33d8:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    33da:	8b 85       	ldd	r24, Y+11	; 0x0b
    33dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    33de:	ad 85       	ldd	r26, Y+13	; 0x0d
    33e0:	be 85       	ldd	r27, Y+14	; 0x0e
    33e2:	9e 01       	movw	r18, r28
    33e4:	21 5f       	subi	r18, 0xF1	; 241
    33e6:	3f 4f       	sbci	r19, 0xFF	; 255
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	a9 01       	movw	r20, r18
    33ee:	0e 94 cf 18 	call	0x319e	; 0x319e <IntToString>
    33f2:	9a 87       	std	Y+10, r25	; 0x0a
    33f4:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    33f6:	1d 82       	std	Y+5, r1	; 0x05
    33f8:	1e 82       	std	Y+6, r1	; 0x06
    33fa:	1f 82       	std	Y+7, r1	; 0x07
    33fc:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    33fe:	19 82       	std	Y+1, r1	; 0x01
    3400:	1a 82       	std	Y+2, r1	; 0x02
    3402:	1b 82       	std	Y+3, r1	; 0x03
    3404:	1c 82       	std	Y+4, r1	; 0x04
    3406:	0b c0       	rjmp	.+22     	; 0x341e <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    3408:	8d 81       	ldd	r24, Y+5	; 0x05
    340a:	9e 81       	ldd	r25, Y+6	; 0x06
    340c:	af 81       	ldd	r26, Y+7	; 0x07
    340e:	b8 85       	ldd	r27, Y+8	; 0x08
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	a1 1d       	adc	r26, r1
    3414:	b1 1d       	adc	r27, r1
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	9e 83       	std	Y+6, r25	; 0x06
    341a:	af 83       	std	Y+7, r26	; 0x07
    341c:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    341e:	2d 81       	ldd	r18, Y+5	; 0x05
    3420:	3e 81       	ldd	r19, Y+6	; 0x06
    3422:	89 85       	ldd	r24, Y+9	; 0x09
    3424:	9a 85       	ldd	r25, Y+10	; 0x0a
    3426:	fc 01       	movw	r30, r24
    3428:	e2 0f       	add	r30, r18
    342a:	f3 1f       	adc	r31, r19
    342c:	80 81       	ld	r24, Z
    342e:	88 23       	and	r24, r24
    3430:	59 f7       	brne	.-42     	; 0x3408 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	af 81       	ldd	r26, Y+7	; 0x07
    3438:	b8 85       	ldd	r27, Y+8	; 0x08
    343a:	02 97       	sbiw	r24, 0x02	; 2
    343c:	a1 09       	sbc	r26, r1
    343e:	b1 09       	sbc	r27, r1
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	9e 83       	std	Y+6, r25	; 0x06
    3444:	af 83       	std	Y+7, r26	; 0x07
    3446:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	af 81       	ldd	r26, Y+7	; 0x07
    344e:	b8 85       	ldd	r27, Y+8	; 0x08
    3450:	00 97       	sbiw	r24, 0x00	; 0
    3452:	a1 05       	cpc	r26, r1
    3454:	b1 05       	cpc	r27, r1
    3456:	49 f5       	brne	.+82     	; 0x34aa <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    3458:	80 e3       	ldi	r24, 0x30	; 48
    345a:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
    345e:	25 c0       	rjmp	.+74     	; 0x34aa <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    3460:	29 81       	ldd	r18, Y+1	; 0x01
    3462:	3a 81       	ldd	r19, Y+2	; 0x02
    3464:	4b 81       	ldd	r20, Y+3	; 0x03
    3466:	5c 81       	ldd	r21, Y+4	; 0x04
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	af 81       	ldd	r26, Y+7	; 0x07
    346e:	b8 85       	ldd	r27, Y+8	; 0x08
    3470:	28 17       	cp	r18, r24
    3472:	39 07       	cpc	r19, r25
    3474:	4a 07       	cpc	r20, r26
    3476:	5b 07       	cpc	r21, r27
    3478:	19 f4       	brne	.+6      	; 0x3480 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    347a:	8e e2       	ldi	r24, 0x2E	; 46
    347c:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    3480:	29 81       	ldd	r18, Y+1	; 0x01
    3482:	3a 81       	ldd	r19, Y+2	; 0x02
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	fc 01       	movw	r30, r24
    348a:	e2 0f       	add	r30, r18
    348c:	f3 1f       	adc	r31, r19
    348e:	80 81       	ld	r24, Z
    3490:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
		counter2++;
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	9a 81       	ldd	r25, Y+2	; 0x02
    3498:	ab 81       	ldd	r26, Y+3	; 0x03
    349a:	bc 81       	ldd	r27, Y+4	; 0x04
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	a1 1d       	adc	r26, r1
    34a0:	b1 1d       	adc	r27, r1
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	9a 83       	std	Y+2, r25	; 0x02
    34a6:	ab 83       	std	Y+3, r26	; 0x03
    34a8:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    34aa:	29 81       	ldd	r18, Y+1	; 0x01
    34ac:	3a 81       	ldd	r19, Y+2	; 0x02
    34ae:	89 85       	ldd	r24, Y+9	; 0x09
    34b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b2:	fc 01       	movw	r30, r24
    34b4:	e2 0f       	add	r30, r18
    34b6:	f3 1f       	adc	r31, r19
    34b8:	80 81       	ld	r24, Z
    34ba:	88 23       	and	r24, r24
    34bc:	89 f6       	brne	.-94     	; 0x3460 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    34be:	a6 96       	adiw	r28, 0x26	; 38
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	08 95       	ret

000034d0 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <LCD_voidGoToPosition+0x6>
    34d6:	0f 92       	push	r0
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	8a 83       	std	Y+2, r24	; 0x02
    34de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    34e0:	80 e8       	ldi	r24, 0x80	; 128
    34e2:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	88 23       	and	r24, r24
    34e8:	21 f4       	brne	.+8      	; 0x34f2 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	80 58       	subi	r24, 0x80	; 128
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	14 c0       	rjmp	.+40     	; 0x351a <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    34f2:	8a 81       	ldd	r24, Y+2	; 0x02
    34f4:	81 30       	cpi	r24, 0x01	; 1
    34f6:	21 f4       	brne	.+8      	; 0x3500 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	80 54       	subi	r24, 0x40	; 64
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	0d c0       	rjmp	.+26     	; 0x351a <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	82 30       	cpi	r24, 0x02	; 2
    3504:	21 f4       	brne	.+8      	; 0x350e <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	8c 56       	subi	r24, 0x6C	; 108
    350a:	89 83       	std	Y+1, r24	; 0x01
    350c:	06 c0       	rjmp	.+12     	; 0x351a <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	83 30       	cpi	r24, 0x03	; 3
    3512:	19 f4       	brne	.+6      	; 0x351a <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    3514:	8b 81       	ldd	r24, Y+3	; 0x03
    3516:	8c 52       	subi	r24, 0x2C	; 44
    3518:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	80 68       	ori	r24, 0x80	; 128
    351e:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
}
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <LCD_voidClear>:

void LCD_voidClear(u8 X_Position, u8 Y_Position)
{
    3532:	df 93       	push	r29
    3534:	cf 93       	push	r28
    3536:	00 d0       	rcall	.+0      	; 0x3538 <LCD_voidClear+0x6>
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	89 83       	std	Y+1, r24	; 0x01
    353e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position,Y_Position);
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	6a 81       	ldd	r22, Y+2	; 0x02
    3544:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    3548:	80 e2       	ldi	r24, 0x20	; 32
    354a:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
}
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <LCD_voidClearLine>:
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	00 d0       	rcall	.+0      	; 0x355e <LCD_voidClearLine+0x6>
    355e:	0f 92       	push	r0
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	8a 83       	std	Y+2, r24	; 0x02
    3566:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 num = 0; num <= Y_Position; num++)
    3568:	19 82       	std	Y+1, r1	; 0x01
    356a:	0a c0       	rjmp	.+20     	; 0x3580 <LCD_voidClearLine+0x28>
	{
		LCD_voidGoToPosition(X_Position,num);
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	69 81       	ldd	r22, Y+1	; 0x01
    3570:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <LCD_voidGoToPosition>
		LCD_voidWriteChar(' ');
    3574:	80 e2       	ldi	r24, 0x20	; 32
    3576:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
	LCD_voidGoToPosition(X_Position,Y_Position);
	LCD_voidWriteChar(' ');
}
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
	for(u8 num = 0; num <= Y_Position; num++)
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	8f 5f       	subi	r24, 0xFF	; 255
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	99 81       	ldd	r25, Y+1	; 0x01
    3582:	8b 81       	ldd	r24, Y+3	; 0x03
    3584:	89 17       	cp	r24, r25
    3586:	90 f7       	brcc	.-28     	; 0x356c <LCD_voidClearLine+0x14>
	{
		LCD_voidGoToPosition(X_Position,num);
		LCD_voidWriteChar(' ');
	}
}
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	0f 90       	pop	r0
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	27 97       	sbiw	r28, 0x07	; 7
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	9c 83       	std	Y+4, r25	; 0x04
    35aa:	8b 83       	std	Y+3, r24	; 0x03
    35ac:	6d 83       	std	Y+5, r22	; 0x05
    35ae:	4e 83       	std	Y+6, r20	; 0x06
    35b0:	2f 83       	std	Y+7, r18	; 0x07

	LCD_voidGoToPosition(row,column);
    35b2:	8e 81       	ldd	r24, Y+6	; 0x06
    35b4:	6f 81       	ldd	r22, Y+7	; 0x07
    35b6:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    35ba:	8d 81       	ldd	r24, Y+5	; 0x05
    35bc:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
	u8 address = 0;
    35c0:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    35c2:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	88 30       	cpi	r24, 0x08	; 8
    35c8:	30 f5       	brcc	.+76     	; 0x3616 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	88 0f       	add	r24, r24
    35da:	99 1f       	adc	r25, r25
    35dc:	8a 83       	std	Y+2, r24	; 0x02
		Set_Bit(address,6);
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	80 64       	ori	r24, 0x40	; 64
    35e2:	8a 83       	std	Y+2, r24	; 0x02
		Clear_Bit(address,7);
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	8f 77       	andi	r24, 0x7F	; 127
    35e8:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    35ea:	8a 81       	ldd	r24, Y+2	; 0x02
    35ec:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    35f0:	19 82       	std	Y+1, r1	; 0x01
    35f2:	0e c0       	rjmp	.+28     	; 0x3610 <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	28 2f       	mov	r18, r24
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	9c 81       	ldd	r25, Y+4	; 0x04
    35fe:	fc 01       	movw	r30, r24
    3600:	e2 0f       	add	r30, r18
    3602:	f3 1f       	adc	r31, r19
    3604:	80 81       	ld	r24, Z
    3606:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		Set_Bit(address,6);
		Clear_Bit(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	8f 5f       	subi	r24, 0xFF	; 255
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	88 30       	cpi	r24, 0x08	; 8
    3614:	78 f3       	brcs	.-34     	; 0x35f4 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    3616:	82 e0       	ldi	r24, 0x02	; 2
    3618:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_voidSendCommand>
}
    361c:	27 96       	adiw	r28, 0x07	; 7
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <ADC_LM35>:

f32 volatile Globalu8Readings[5] = {0};
u8 Sensor_index = 0;

void ADC_LM35()
{
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	00 d0       	rcall	.+0      	; 0x3634 <ADC_LM35+0x6>
    3634:	00 d0       	rcall	.+0      	; 0x3636 <ADC_LM35+0x8>
    3636:	00 d0       	rcall	.+0      	; 0x3638 <ADC_LM35+0xa>
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
	Globalu8Readings[Sensor_index] = (f32)ADC_u16ReadADCInMV() > 1500 ? 1500 : (f32)ADC_u16ReadADCInMV()/10 ;
    363c:	80 91 ba 01 	lds	r24, 0x01BA
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	3e 83       	std	Y+6, r19	; 0x06
    3646:	2d 83       	std	Y+5, r18	; 0x05
    3648:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <ADC_u16ReadADCInMV>
    364c:	cc 01       	movw	r24, r24
    364e:	a0 e0       	ldi	r26, 0x00	; 0
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e8       	ldi	r19, 0x80	; 128
    3666:	4b eb       	ldi	r20, 0xBB	; 187
    3668:	54 e4       	ldi	r21, 0x44	; 68
    366a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    366e:	18 16       	cp	r1, r24
    3670:	4c f4       	brge	.+18     	; 0x3684 <ADC_LM35+0x56>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e8       	ldi	r25, 0x80	; 128
    3676:	ab eb       	ldi	r26, 0xBB	; 187
    3678:	b4 e4       	ldi	r27, 0x44	; 68
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	ab 83       	std	Y+3, r26	; 0x03
    3680:	bc 83       	std	Y+4, r27	; 0x04
    3682:	19 c0       	rjmp	.+50     	; 0x36b6 <ADC_LM35+0x88>
    3684:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <ADC_u16ReadADCInMV>
    3688:	cc 01       	movw	r24, r24
    368a:	a0 e0       	ldi	r26, 0x00	; 0
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e2       	ldi	r20, 0x20	; 32
    36a4:	51 e4       	ldi	r21, 0x41	; 65
    36a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	89 83       	std	Y+1, r24	; 0x01
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	ab 83       	std	Y+3, r26	; 0x03
    36b4:	bc 83       	std	Y+4, r27	; 0x04
    36b6:	8d 81       	ldd	r24, Y+5	; 0x05
    36b8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ba:	88 0f       	add	r24, r24
    36bc:	99 1f       	adc	r25, r25
    36be:	88 0f       	add	r24, r24
    36c0:	99 1f       	adc	r25, r25
    36c2:	fc 01       	movw	r30, r24
    36c4:	ea 55       	subi	r30, 0x5A	; 90
    36c6:	fe 4f       	sbci	r31, 0xFE	; 254
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	9a 81       	ldd	r25, Y+2	; 0x02
    36cc:	ab 81       	ldd	r26, Y+3	; 0x03
    36ce:	bc 81       	ldd	r27, Y+4	; 0x04
    36d0:	80 83       	st	Z, r24
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	a2 83       	std	Z+2, r26	; 0x02
    36d6:	b3 83       	std	Z+3, r27	; 0x03
}
    36d8:	26 96       	adiw	r28, 0x06	; 6
    36da:	0f b6       	in	r0, 0x3f	; 63
    36dc:	f8 94       	cli
    36de:	de bf       	out	0x3e, r29	; 62
    36e0:	0f be       	out	0x3f, r0	; 63
    36e2:	cd bf       	out	0x3d, r28	; 61
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <ADC_LDR>:
void ADC_LDR()
{
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
//	u16 Local_u16LDRRead = ADC_u16ReadADCInMV();
	Globalu8Readings[Sensor_index] = (f32)ADC_u16ReadADCInMV()/1000UL;
    36f6:	80 91 ba 01 	lds	r24, 0x01BA
    36fa:	08 2f       	mov	r16, r24
    36fc:	10 e0       	ldi	r17, 0x00	; 0
    36fe:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <ADC_u16ReadADCInMV>
    3702:	cc 01       	movw	r24, r24
    3704:	a0 e0       	ldi	r26, 0x00	; 0
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	bc 01       	movw	r22, r24
    370a:	cd 01       	movw	r24, r26
    370c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	4a e7       	ldi	r20, 0x7A	; 122
    371e:	54 e4       	ldi	r21, 0x44	; 68
    3720:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	9c 01       	movw	r18, r24
    372a:	ad 01       	movw	r20, r26
    372c:	c8 01       	movw	r24, r16
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	fc 01       	movw	r30, r24
    3738:	ea 55       	subi	r30, 0x5A	; 90
    373a:	fe 4f       	sbci	r31, 0xFE	; 254
    373c:	20 83       	st	Z, r18
    373e:	31 83       	std	Z+1, r19	; 0x01
    3740:	42 83       	std	Z+2, r20	; 0x02
    3742:	53 83       	std	Z+3, r21	; 0x03
}
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	08 95       	ret

0000374e <ADC_POT>:
void ADC_POT()
{
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
//	u16 Local_u16POTRead = ADC_u16ReadADCInMV();
	Globalu8Readings[Sensor_index] = (f32)ADC_u16ReadADCInMV()/1000UL;
    375a:	80 91 ba 01 	lds	r24, 0x01BA
    375e:	08 2f       	mov	r16, r24
    3760:	10 e0       	ldi	r17, 0x00	; 0
    3762:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <ADC_u16ReadADCInMV>
    3766:	cc 01       	movw	r24, r24
    3768:	a0 e0       	ldi	r26, 0x00	; 0
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	4a e7       	ldi	r20, 0x7A	; 122
    3782:	54 e4       	ldi	r21, 0x44	; 68
    3784:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	9c 01       	movw	r18, r24
    378e:	ad 01       	movw	r20, r26
    3790:	c8 01       	movw	r24, r16
    3792:	88 0f       	add	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	88 0f       	add	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	fc 01       	movw	r30, r24
    379c:	ea 55       	subi	r30, 0x5A	; 90
    379e:	fe 4f       	sbci	r31, 0xFE	; 254
    37a0:	20 83       	st	Z, r18
    37a2:	31 83       	std	Z+1, r19	; 0x01
    37a4:	42 83       	std	Z+2, r20	; 0x02
    37a6:	53 83       	std	Z+3, r21	; 0x03

}
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	08 95       	ret

000037b2 <ADC_voidChannelRun>:



void ADC_voidChannelRun()
{
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
	ADC_voidDisable();
    37ba:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <ADC_voidDisable>

	if(Sensor_index == CH_0)
    37be:	80 91 ba 01 	lds	r24, 0x01BA
    37c2:	88 23       	and	r24, r24
    37c4:	31 f4       	brne	.+12     	; 0x37d2 <ADC_voidChannelRun+0x20>
	{
		ADC_LM35();
    37c6:	0e 94 17 1b 	call	0x362e	; 0x362e <ADC_LM35>
		Sensor_index = 1;
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	80 93 ba 01 	sts	0x01BA, r24
    37d0:	15 c0       	rjmp	.+42     	; 0x37fc <ADC_voidChannelRun+0x4a>
	}
	else if(Sensor_index == CH_1)
    37d2:	80 91 ba 01 	lds	r24, 0x01BA
    37d6:	81 30       	cpi	r24, 0x01	; 1
    37d8:	31 f4       	brne	.+12     	; 0x37e6 <ADC_voidChannelRun+0x34>
	{
		ADC_POT();
    37da:	0e 94 a7 1b 	call	0x374e	; 0x374e <ADC_POT>
		Sensor_index = 4;
    37de:	84 e0       	ldi	r24, 0x04	; 4
    37e0:	80 93 ba 01 	sts	0x01BA, r24
    37e4:	0b c0       	rjmp	.+22     	; 0x37fc <ADC_voidChannelRun+0x4a>
	}
	else if(Sensor_index == CH_4)
    37e6:	80 91 ba 01 	lds	r24, 0x01BA
    37ea:	84 30       	cpi	r24, 0x04	; 4
    37ec:	29 f4       	brne	.+10     	; 0x37f8 <ADC_voidChannelRun+0x46>
	{
		ADC_LDR();
    37ee:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ADC_LDR>
		Sensor_index = 0;
    37f2:	10 92 ba 01 	sts	0x01BA, r1
    37f6:	02 c0       	rjmp	.+4      	; 0x37fc <ADC_voidChannelRun+0x4a>
	}
	else
	{
		Sensor_index = 0;
    37f8:	10 92 ba 01 	sts	0x01BA, r1
	}
}
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <LM32_Interrupt>:

void LM32_Interrupt()
{
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoToPosition(1,0);
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"LM35 value:");
    3812:	80 e6       	ldi	r24, 0x60	; 96
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	0e 94 a6 18 	call	0x314c	; 0x314c <LCD_voidWriteString>
	LCD_voidWriteFloatData(Globalu8Readings[CH_0]);
    381a:	80 91 a6 01 	lds	r24, 0x01A6
    381e:	90 91 a7 01 	lds	r25, 0x01A7
    3822:	a0 91 a8 01 	lds	r26, 0x01A8
    3826:	b0 91 a9 01 	lds	r27, 0x01A9
    382a:	bc 01       	movw	r22, r24
    382c:	cd 01       	movw	r24, r26
    382e:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_voidWriteFloatData>
	LCD_voidWriteString((u8*)" C");
    3832:	8c e6       	ldi	r24, 0x6C	; 108
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 a6 18 	call	0x314c	; 0x314c <LCD_voidWriteString>
}
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <LDR_Interrupt>:
void LDR_Interrupt()
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoToPosition(3,0);
    3848:	83 e0       	ldi	r24, 0x03	; 3
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"LDR value:");
    3850:	8f e6       	ldi	r24, 0x6F	; 111
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 a6 18 	call	0x314c	; 0x314c <LCD_voidWriteString>
	LCD_voidWriteFloatData(Globalu8Readings[CH_4]);
    3858:	80 91 b6 01 	lds	r24, 0x01B6
    385c:	90 91 b7 01 	lds	r25, 0x01B7
    3860:	a0 91 b8 01 	lds	r26, 0x01B8
    3864:	b0 91 b9 01 	lds	r27, 0x01B9
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_voidWriteFloatData>
	LCD_voidWriteString((u8*)" volt");
    3870:	8a e7       	ldi	r24, 0x7A	; 122
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	0e 94 a6 18 	call	0x314c	; 0x314c <LCD_voidWriteString>
}
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <POT_Interrupt>:
void POT_Interrupt()
{
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
	LCD_voidGoToPosition(2,0);
    3886:	82 e0       	ldi	r24, 0x02	; 2
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"POT value:");
    388e:	80 e8       	ldi	r24, 0x80	; 128
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	0e 94 a6 18 	call	0x314c	; 0x314c <LCD_voidWriteString>
	LCD_voidWriteFloatData(Globalu8Readings[CH_1]);
    3896:	80 91 aa 01 	lds	r24, 0x01AA
    389a:	90 91 ab 01 	lds	r25, 0x01AB
    389e:	a0 91 ac 01 	lds	r26, 0x01AC
    38a2:	b0 91 ad 01 	lds	r27, 0x01AD
    38a6:	bc 01       	movw	r22, r24
    38a8:	cd 01       	movw	r24, r26
    38aa:	0e 94 c9 19 	call	0x3392	; 0x3392 <LCD_voidWriteFloatData>
	LCD_voidWriteString((u8*)" volt");
    38ae:	8a e7       	ldi	r24, 0x7A	; 122
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	0e 94 a6 18 	call	0x314c	; 0x314c <LCD_voidWriteString>
}
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <main>:



int main(void)
{
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	aa 97       	sbiw	r28, 0x2a	; 42
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	de bf       	out	0x3e, r29	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    38d0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <PORT_voidInit>
	LCD_voidInit();
    38d4:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_voidInit>
	GIE_voidEnable();
    38d8:	0e 94 91 09 	call	0x1322	; 0x1322 <GIE_voidEnable>
	EXTI0_voidInit();
    38dc:	0e 94 ad 09 	call	0x135a	; 0x135a <EXTI0_voidInit>
	EXTI1_voidInit();
    38e0:	0e 94 45 0a 	call	0x148a	; 0x148a <EXTI1_voidInit>
	EXTI2_voidInit();
    38e4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <EXTI2_voidInit>
	EXTI2_voidEnable();
    38e8:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <EXTI2_voidEnable>
	EXTI1_voidEnable();
    38ec:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <EXTI1_voidEnable>
	EXTI0_voidEnable();
    38f0:	0e 94 c2 09 	call	0x1384	; 0x1384 <EXTI0_voidEnable>
	ADC_voidEnable();
    38f4:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <ADC_voidEnable>
	ADC_voidInterrputEnable();
    38f8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <ADC_voidInterrputEnable>
	ADC_voidStartInterruptConversion(CH_0); // Start First Conversion
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <ADC_voidStartInterruptConversion>

	ADC_SetCallback(ADC_voidChannelRun); // Call Back Function
    3902:	89 ed       	ldi	r24, 0xD9	; 217
    3904:	9b e1       	ldi	r25, 0x1B	; 27
    3906:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <ADC_SetCallback>

	// ISR Functions
	EXT0_VID_SET_CALL_BACK(LM32_Interrupt);
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	9c e1       	ldi	r25, 0x1C	; 28
    390e:	0e 94 32 0b 	call	0x1664	; 0x1664 <EXT0_VID_SET_CALL_BACK>
	EXT1_VID_SET_CALL_BACK(POT_Interrupt);
    3912:	8f e3       	ldi	r24, 0x3F	; 63
    3914:	9c e1       	ldi	r25, 0x1C	; 28
    3916:	0e 94 48 0b 	call	0x1690	; 0x1690 <EXT1_VID_SET_CALL_BACK>
	EXT2_VID_SET_CALL_BACK(LDR_Interrupt);
    391a:	80 e2       	ldi	r24, 0x20	; 32
    391c:	9c e1       	ldi	r25, 0x1C	; 28
    391e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <EXT2_VID_SET_CALL_BACK>

	while(1)
	{
		DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_0, DIO_u8PIN_HIGH);	// LM35
    3922:	82 e0       	ldi	r24, 0x02	; 2
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	41 e0       	ldi	r20, 0x01	; 1
    3928:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_1, DIO_u8PIN_HIGH);	// POT
    392c:	82 e0       	ldi	r24, 0x02	; 2
    392e:	61 e0       	ldi	r22, 0x01	; 1
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_2, DIO_u8PIN_HIGH);	// LDR
    3936:	82 e0       	ldi	r24, 0x02	; 2
    3938:	62 e0       	ldi	r22, 0x02	; 2
    393a:	41 e0       	ldi	r20, 0x01	; 1
    393c:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>

//		DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN_2, DIO_u8PIN_HIGH);
//		DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN_3, DIO_u8PIN_HIGH);
//		DIO_u8SetPinValue(DIO_u8PORTB, DIO_u8PIN_2, DIO_u8PIN_HIGH);

		if(Globalu8Readings[CH_0] > 28)
    3940:	80 91 a6 01 	lds	r24, 0x01A6
    3944:	90 91 a7 01 	lds	r25, 0x01A7
    3948:	a0 91 a8 01 	lds	r26, 0x01A8
    394c:	b0 91 a9 01 	lds	r27, 0x01A9
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	40 ee       	ldi	r20, 0xE0	; 224
    395a:	51 e4       	ldi	r21, 0x41	; 65
    395c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3960:	18 16       	cp	r1, r24
    3962:	0c f0       	brlt	.+2      	; 0x3966 <main+0xaa>
    3964:	82 c0       	rjmp	.+260    	; 0x3a6a <main+0x1ae>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_0, DIO_u8PIN_LOW); // Interrupt Occur
    3966:	82 e0       	ldi	r24, 0x02	; 2
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	40 e0       	ldi	r20, 0x00	; 0
    396c:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_3, DIO_u8PIN_HIGH);
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	63 e0       	ldi	r22, 0x03	; 3
    3974:	41 e0       	ldi	r20, 0x01	; 1
    3976:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	a6 e1       	ldi	r26, 0x16	; 22
    3980:	b3 e4       	ldi	r27, 0x43	; 67
    3982:	8f a3       	std	Y+39, r24	; 0x27
    3984:	98 a7       	std	Y+40, r25	; 0x28
    3986:	a9 a7       	std	Y+41, r26	; 0x29
    3988:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398a:	6f a1       	ldd	r22, Y+39	; 0x27
    398c:	78 a5       	ldd	r23, Y+40	; 0x28
    398e:	89 a5       	ldd	r24, Y+41	; 0x29
    3990:	9a a5       	ldd	r25, Y+42	; 0x2a
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	4a e7       	ldi	r20, 0x7A	; 122
    3998:	55 e4       	ldi	r21, 0x45	; 69
    399a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	8b a3       	std	Y+35, r24	; 0x23
    39a4:	9c a3       	std	Y+36, r25	; 0x24
    39a6:	ad a3       	std	Y+37, r26	; 0x25
    39a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39aa:	6b a1       	ldd	r22, Y+35	; 0x23
    39ac:	7c a1       	ldd	r23, Y+36	; 0x24
    39ae:	8d a1       	ldd	r24, Y+37	; 0x25
    39b0:	9e a1       	ldd	r25, Y+38	; 0x26
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e8       	ldi	r20, 0x80	; 128
    39b8:	5f e3       	ldi	r21, 0x3F	; 63
    39ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39be:	88 23       	and	r24, r24
    39c0:	2c f4       	brge	.+10     	; 0x39cc <main+0x110>
		__ticks = 1;
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	9a a3       	std	Y+34, r25	; 0x22
    39c8:	89 a3       	std	Y+33, r24	; 0x21
    39ca:	3f c0       	rjmp	.+126    	; 0x3a4a <main+0x18e>
	else if (__tmp > 65535)
    39cc:	6b a1       	ldd	r22, Y+35	; 0x23
    39ce:	7c a1       	ldd	r23, Y+36	; 0x24
    39d0:	8d a1       	ldd	r24, Y+37	; 0x25
    39d2:	9e a1       	ldd	r25, Y+38	; 0x26
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	3f ef       	ldi	r19, 0xFF	; 255
    39d8:	4f e7       	ldi	r20, 0x7F	; 127
    39da:	57 e4       	ldi	r21, 0x47	; 71
    39dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39e0:	18 16       	cp	r1, r24
    39e2:	4c f5       	brge	.+82     	; 0x3a36 <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e4:	6f a1       	ldd	r22, Y+39	; 0x27
    39e6:	78 a5       	ldd	r23, Y+40	; 0x28
    39e8:	89 a5       	ldd	r24, Y+41	; 0x29
    39ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e2       	ldi	r20, 0x20	; 32
    39f2:	51 e4       	ldi	r21, 0x41	; 65
    39f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	9a a3       	std	Y+34, r25	; 0x22
    3a0a:	89 a3       	std	Y+33, r24	; 0x21
    3a0c:	0f c0       	rjmp	.+30     	; 0x3a2c <main+0x170>
    3a0e:	80 e9       	ldi	r24, 0x90	; 144
    3a10:	91 e0       	ldi	r25, 0x01	; 1
    3a12:	98 a3       	std	Y+32, r25	; 0x20
    3a14:	8f 8f       	std	Y+31, r24	; 0x1f
    3a16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a18:	98 a1       	ldd	r25, Y+32	; 0x20
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <main+0x15e>
    3a1e:	98 a3       	std	Y+32, r25	; 0x20
    3a20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a22:	89 a1       	ldd	r24, Y+33	; 0x21
    3a24:	9a a1       	ldd	r25, Y+34	; 0x22
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	9a a3       	std	Y+34, r25	; 0x22
    3a2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	69 f7       	brne	.-38     	; 0x3a0e <main+0x152>
    3a34:	14 c0       	rjmp	.+40     	; 0x3a5e <main+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a36:	6b a1       	ldd	r22, Y+35	; 0x23
    3a38:	7c a1       	ldd	r23, Y+36	; 0x24
    3a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	9a a3       	std	Y+34, r25	; 0x22
    3a48:	89 a3       	std	Y+33, r24	; 0x21
    3a4a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a4c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a4e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a50:	8d 8f       	std	Y+29, r24	; 0x1d
    3a52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a56:	01 97       	sbiw	r24, 0x01	; 1
    3a58:	f1 f7       	brne	.-4      	; 0x3a56 <main+0x19a>
    3a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    3a5c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(150);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_3, DIO_u8PIN_LOW);
    3a5e:	82 e0       	ldi	r24, 0x02	; 2
    3a60:	63 e0       	ldi	r22, 0x03	; 3
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    3a68:	09 c0       	rjmp	.+18     	; 0x3a7c <main+0x1c0>

		}
		else
		{
			LCD_voidClearLine(1,19);
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	63 e1       	ldi	r22, 0x13	; 19
    3a6e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <LCD_voidClearLine>
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_0, DIO_u8PIN_HIGH);
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	60 e0       	ldi	r22, 0x00	; 0
    3a76:	41 e0       	ldi	r20, 0x01	; 1
    3a78:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
		}

		if(Globalu8Readings[CH_1] > 2.5f)
    3a7c:	80 91 aa 01 	lds	r24, 0x01AA
    3a80:	90 91 ab 01 	lds	r25, 0x01AB
    3a84:	a0 91 ac 01 	lds	r26, 0x01AC
    3a88:	b0 91 ad 01 	lds	r27, 0x01AD
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	40 e2       	ldi	r20, 0x20	; 32
    3a96:	50 e4       	ldi	r21, 0x40	; 64
    3a98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a9c:	18 16       	cp	r1, r24
    3a9e:	0c f0       	brlt	.+2      	; 0x3aa2 <main+0x1e6>
    3aa0:	82 c0       	rjmp	.+260    	; 0x3ba6 <main+0x2ea>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_1, DIO_u8PIN_LOW);
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	61 e0       	ldi	r22, 0x01	; 1
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_4, DIO_u8PIN_HIGH);
    3aac:	82 e0       	ldi	r24, 0x02	; 2
    3aae:	64 e0       	ldi	r22, 0x04	; 4
    3ab0:	41 e0       	ldi	r20, 0x01	; 1
    3ab2:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	a6 e1       	ldi	r26, 0x16	; 22
    3abc:	b3 e4       	ldi	r27, 0x43	; 67
    3abe:	89 8f       	std	Y+25, r24	; 0x19
    3ac0:	9a 8f       	std	Y+26, r25	; 0x1a
    3ac2:	ab 8f       	std	Y+27, r26	; 0x1b
    3ac4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ac8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	4a e7       	ldi	r20, 0x7A	; 122
    3ad4:	55 e4       	ldi	r21, 0x45	; 69
    3ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	8d 8b       	std	Y+21, r24	; 0x15
    3ae0:	9e 8b       	std	Y+22, r25	; 0x16
    3ae2:	af 8b       	std	Y+23, r26	; 0x17
    3ae4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aea:	8f 89       	ldd	r24, Y+23	; 0x17
    3aec:	98 8d       	ldd	r25, Y+24	; 0x18
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e8       	ldi	r20, 0x80	; 128
    3af4:	5f e3       	ldi	r21, 0x3F	; 63
    3af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3afa:	88 23       	and	r24, r24
    3afc:	2c f4       	brge	.+10     	; 0x3b08 <main+0x24c>
		__ticks = 1;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	9c 8b       	std	Y+20, r25	; 0x14
    3b04:	8b 8b       	std	Y+19, r24	; 0x13
    3b06:	3f c0       	rjmp	.+126    	; 0x3b86 <main+0x2ca>
	else if (__tmp > 65535)
    3b08:	6d 89       	ldd	r22, Y+21	; 0x15
    3b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	3f ef       	ldi	r19, 0xFF	; 255
    3b14:	4f e7       	ldi	r20, 0x7F	; 127
    3b16:	57 e4       	ldi	r21, 0x47	; 71
    3b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1c:	18 16       	cp	r1, r24
    3b1e:	4c f5       	brge	.+82     	; 0x3b72 <main+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b20:	69 8d       	ldd	r22, Y+25	; 0x19
    3b22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e2       	ldi	r20, 0x20	; 32
    3b2e:	51 e4       	ldi	r21, 0x41	; 65
    3b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	bc 01       	movw	r22, r24
    3b3a:	cd 01       	movw	r24, r26
    3b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	9c 8b       	std	Y+20, r25	; 0x14
    3b46:	8b 8b       	std	Y+19, r24	; 0x13
    3b48:	0f c0       	rjmp	.+30     	; 0x3b68 <main+0x2ac>
    3b4a:	80 e9       	ldi	r24, 0x90	; 144
    3b4c:	91 e0       	ldi	r25, 0x01	; 1
    3b4e:	9a 8b       	std	Y+18, r25	; 0x12
    3b50:	89 8b       	std	Y+17, r24	; 0x11
    3b52:	89 89       	ldd	r24, Y+17	; 0x11
    3b54:	9a 89       	ldd	r25, Y+18	; 0x12
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	f1 f7       	brne	.-4      	; 0x3b56 <main+0x29a>
    3b5a:	9a 8b       	std	Y+18, r25	; 0x12
    3b5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b60:	9c 89       	ldd	r25, Y+20	; 0x14
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	9c 8b       	std	Y+20, r25	; 0x14
    3b66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b68:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	69 f7       	brne	.-38     	; 0x3b4a <main+0x28e>
    3b70:	14 c0       	rjmp	.+40     	; 0x3b9a <main+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b72:	6d 89       	ldd	r22, Y+21	; 0x15
    3b74:	7e 89       	ldd	r23, Y+22	; 0x16
    3b76:	8f 89       	ldd	r24, Y+23	; 0x17
    3b78:	98 8d       	ldd	r25, Y+24	; 0x18
    3b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	9c 8b       	std	Y+20, r25	; 0x14
    3b84:	8b 8b       	std	Y+19, r24	; 0x13
    3b86:	8b 89       	ldd	r24, Y+19	; 0x13
    3b88:	9c 89       	ldd	r25, Y+20	; 0x14
    3b8a:	98 8b       	std	Y+16, r25	; 0x10
    3b8c:	8f 87       	std	Y+15, r24	; 0x0f
    3b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b90:	98 89       	ldd	r25, Y+16	; 0x10
    3b92:	01 97       	sbiw	r24, 0x01	; 1
    3b94:	f1 f7       	brne	.-4      	; 0x3b92 <main+0x2d6>
    3b96:	98 8b       	std	Y+16, r25	; 0x10
    3b98:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(150);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_4, DIO_u8PIN_LOW);
    3b9a:	82 e0       	ldi	r24, 0x02	; 2
    3b9c:	64 e0       	ldi	r22, 0x04	; 4
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    3ba4:	09 c0       	rjmp	.+18     	; 0x3bb8 <main+0x2fc>

		}
		else
		{
			LCD_voidClearLine(2,19);
    3ba6:	82 e0       	ldi	r24, 0x02	; 2
    3ba8:	63 e1       	ldi	r22, 0x13	; 19
    3baa:	0e 94 ac 1a 	call	0x3558	; 0x3558 <LCD_voidClearLine>
			DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN_1, DIO_u8PIN_HIGH);
    3bae:	83 e0       	ldi	r24, 0x03	; 3
    3bb0:	61 e0       	ldi	r22, 0x01	; 1
    3bb2:	41 e0       	ldi	r20, 0x01	; 1
    3bb4:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>

		}

		if(Globalu8Readings[CH_4] > 2.5f)
    3bb8:	80 91 b6 01 	lds	r24, 0x01B6
    3bbc:	90 91 b7 01 	lds	r25, 0x01B7
    3bc0:	a0 91 b8 01 	lds	r26, 0x01B8
    3bc4:	b0 91 b9 01 	lds	r27, 0x01B9
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	40 e2       	ldi	r20, 0x20	; 32
    3bd2:	50 e4       	ldi	r21, 0x40	; 64
    3bd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd8:	18 16       	cp	r1, r24
    3bda:	0c f0       	brlt	.+2      	; 0x3bde <main+0x322>
    3bdc:	82 c0       	rjmp	.+260    	; 0x3ce2 <main+0x426>
		{
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_2, DIO_u8PIN_LOW);
    3bde:	82 e0       	ldi	r24, 0x02	; 2
    3be0:	62 e0       	ldi	r22, 0x02	; 2
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_5, DIO_u8PIN_HIGH);
    3be8:	82 e0       	ldi	r24, 0x02	; 2
    3bea:	65 e0       	ldi	r22, 0x05	; 5
    3bec:	41 e0       	ldi	r20, 0x01	; 1
    3bee:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	a6 e1       	ldi	r26, 0x16	; 22
    3bf8:	b3 e4       	ldi	r27, 0x43	; 67
    3bfa:	8b 87       	std	Y+11, r24	; 0x0b
    3bfc:	9c 87       	std	Y+12, r25	; 0x0c
    3bfe:	ad 87       	std	Y+13, r26	; 0x0d
    3c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	4a e7       	ldi	r20, 0x7A	; 122
    3c10:	55 e4       	ldi	r21, 0x45	; 69
    3c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	8f 83       	std	Y+7, r24	; 0x07
    3c1c:	98 87       	std	Y+8, r25	; 0x08
    3c1e:	a9 87       	std	Y+9, r26	; 0x09
    3c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c22:	6f 81       	ldd	r22, Y+7	; 0x07
    3c24:	78 85       	ldd	r23, Y+8	; 0x08
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e8       	ldi	r20, 0x80	; 128
    3c30:	5f e3       	ldi	r21, 0x3F	; 63
    3c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c36:	88 23       	and	r24, r24
    3c38:	2c f4       	brge	.+10     	; 0x3c44 <main+0x388>
		__ticks = 1;
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	8d 83       	std	Y+5, r24	; 0x05
    3c42:	3f c0       	rjmp	.+126    	; 0x3cc2 <main+0x406>
	else if (__tmp > 65535)
    3c44:	6f 81       	ldd	r22, Y+7	; 0x07
    3c46:	78 85       	ldd	r23, Y+8	; 0x08
    3c48:	89 85       	ldd	r24, Y+9	; 0x09
    3c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	3f ef       	ldi	r19, 0xFF	; 255
    3c50:	4f e7       	ldi	r20, 0x7F	; 127
    3c52:	57 e4       	ldi	r21, 0x47	; 71
    3c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c58:	18 16       	cp	r1, r24
    3c5a:	4c f5       	brge	.+82     	; 0x3cae <main+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e2       	ldi	r20, 0x20	; 32
    3c6a:	51 e4       	ldi	r21, 0x41	; 65
    3c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	bc 01       	movw	r22, r24
    3c76:	cd 01       	movw	r24, r26
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	9e 83       	std	Y+6, r25	; 0x06
    3c82:	8d 83       	std	Y+5, r24	; 0x05
    3c84:	0f c0       	rjmp	.+30     	; 0x3ca4 <main+0x3e8>
    3c86:	80 e9       	ldi	r24, 0x90	; 144
    3c88:	91 e0       	ldi	r25, 0x01	; 1
    3c8a:	9c 83       	std	Y+4, r25	; 0x04
    3c8c:	8b 83       	std	Y+3, r24	; 0x03
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	9c 81       	ldd	r25, Y+4	; 0x04
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	f1 f7       	brne	.-4      	; 0x3c92 <main+0x3d6>
    3c96:	9c 83       	std	Y+4, r25	; 0x04
    3c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	9e 83       	std	Y+6, r25	; 0x06
    3ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	69 f7       	brne	.-38     	; 0x3c86 <main+0x3ca>
    3cac:	14 c0       	rjmp	.+40     	; 0x3cd6 <main+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cae:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb0:	78 85       	ldd	r23, Y+8	; 0x08
    3cb2:	89 85       	ldd	r24, Y+9	; 0x09
    3cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	9e 83       	std	Y+6, r25	; 0x06
    3cc0:	8d 83       	std	Y+5, r24	; 0x05
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc6:	9a 83       	std	Y+2, r25	; 0x02
    3cc8:	89 83       	std	Y+1, r24	; 0x01
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	f1 f7       	brne	.-4      	; 0x3cce <main+0x412>
    3cd2:	9a 83       	std	Y+2, r25	; 0x02
    3cd4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(150);
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_5, DIO_u8PIN_LOW);
    3cd6:	82 e0       	ldi	r24, 0x02	; 2
    3cd8:	65 e0       	ldi	r22, 0x05	; 5
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
    3ce0:	09 c0       	rjmp	.+18     	; 0x3cf4 <main+0x438>

		}
		else
		{
			LCD_voidClearLine(3,19);
    3ce2:	83 e0       	ldi	r24, 0x03	; 3
    3ce4:	63 e1       	ldi	r22, 0x13	; 19
    3ce6:	0e 94 ac 1a 	call	0x3558	; 0x3558 <LCD_voidClearLine>
			DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN_2, DIO_u8PIN_HIGH);
    3cea:	82 e0       	ldi	r24, 0x02	; 2
    3cec:	62 e0       	ldi	r22, 0x02	; 2
    3cee:	41 e0       	ldi	r20, 0x01	; 1
    3cf0:	0e 94 0d 0c 	call	0x181a	; 0x181a <DIO_u8SetPinValue>
		}

		ADC_voidEnable();
    3cf4:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <ADC_voidEnable>
		ADC_voidStartInterruptConversion(Sensor_index);
    3cf8:	80 91 ba 01 	lds	r24, 0x01BA
    3cfc:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <ADC_voidStartInterruptConversion>
    3d00:	10 ce       	rjmp	.-992    	; 0x3922 <main+0x66>

00003d02 <__mulsi3>:
    3d02:	62 9f       	mul	r22, r18
    3d04:	d0 01       	movw	r26, r0
    3d06:	73 9f       	mul	r23, r19
    3d08:	f0 01       	movw	r30, r0
    3d0a:	82 9f       	mul	r24, r18
    3d0c:	e0 0d       	add	r30, r0
    3d0e:	f1 1d       	adc	r31, r1
    3d10:	64 9f       	mul	r22, r20
    3d12:	e0 0d       	add	r30, r0
    3d14:	f1 1d       	adc	r31, r1
    3d16:	92 9f       	mul	r25, r18
    3d18:	f0 0d       	add	r31, r0
    3d1a:	83 9f       	mul	r24, r19
    3d1c:	f0 0d       	add	r31, r0
    3d1e:	74 9f       	mul	r23, r20
    3d20:	f0 0d       	add	r31, r0
    3d22:	65 9f       	mul	r22, r21
    3d24:	f0 0d       	add	r31, r0
    3d26:	99 27       	eor	r25, r25
    3d28:	72 9f       	mul	r23, r18
    3d2a:	b0 0d       	add	r27, r0
    3d2c:	e1 1d       	adc	r30, r1
    3d2e:	f9 1f       	adc	r31, r25
    3d30:	63 9f       	mul	r22, r19
    3d32:	b0 0d       	add	r27, r0
    3d34:	e1 1d       	adc	r30, r1
    3d36:	f9 1f       	adc	r31, r25
    3d38:	bd 01       	movw	r22, r26
    3d3a:	cf 01       	movw	r24, r30
    3d3c:	11 24       	eor	r1, r1
    3d3e:	08 95       	ret

00003d40 <__divmodsi4>:
    3d40:	97 fb       	bst	r25, 7
    3d42:	09 2e       	mov	r0, r25
    3d44:	05 26       	eor	r0, r21
    3d46:	0e d0       	rcall	.+28     	; 0x3d64 <__divmodsi4_neg1>
    3d48:	57 fd       	sbrc	r21, 7
    3d4a:	04 d0       	rcall	.+8      	; 0x3d54 <__divmodsi4_neg2>
    3d4c:	14 d0       	rcall	.+40     	; 0x3d76 <__udivmodsi4>
    3d4e:	0a d0       	rcall	.+20     	; 0x3d64 <__divmodsi4_neg1>
    3d50:	00 1c       	adc	r0, r0
    3d52:	38 f4       	brcc	.+14     	; 0x3d62 <__divmodsi4_exit>

00003d54 <__divmodsi4_neg2>:
    3d54:	50 95       	com	r21
    3d56:	40 95       	com	r20
    3d58:	30 95       	com	r19
    3d5a:	21 95       	neg	r18
    3d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5e:	4f 4f       	sbci	r20, 0xFF	; 255
    3d60:	5f 4f       	sbci	r21, 0xFF	; 255

00003d62 <__divmodsi4_exit>:
    3d62:	08 95       	ret

00003d64 <__divmodsi4_neg1>:
    3d64:	f6 f7       	brtc	.-4      	; 0x3d62 <__divmodsi4_exit>
    3d66:	90 95       	com	r25
    3d68:	80 95       	com	r24
    3d6a:	70 95       	com	r23
    3d6c:	61 95       	neg	r22
    3d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d70:	8f 4f       	sbci	r24, 0xFF	; 255
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	08 95       	ret

00003d76 <__udivmodsi4>:
    3d76:	a1 e2       	ldi	r26, 0x21	; 33
    3d78:	1a 2e       	mov	r1, r26
    3d7a:	aa 1b       	sub	r26, r26
    3d7c:	bb 1b       	sub	r27, r27
    3d7e:	fd 01       	movw	r30, r26
    3d80:	0d c0       	rjmp	.+26     	; 0x3d9c <__udivmodsi4_ep>

00003d82 <__udivmodsi4_loop>:
    3d82:	aa 1f       	adc	r26, r26
    3d84:	bb 1f       	adc	r27, r27
    3d86:	ee 1f       	adc	r30, r30
    3d88:	ff 1f       	adc	r31, r31
    3d8a:	a2 17       	cp	r26, r18
    3d8c:	b3 07       	cpc	r27, r19
    3d8e:	e4 07       	cpc	r30, r20
    3d90:	f5 07       	cpc	r31, r21
    3d92:	20 f0       	brcs	.+8      	; 0x3d9c <__udivmodsi4_ep>
    3d94:	a2 1b       	sub	r26, r18
    3d96:	b3 0b       	sbc	r27, r19
    3d98:	e4 0b       	sbc	r30, r20
    3d9a:	f5 0b       	sbc	r31, r21

00003d9c <__udivmodsi4_ep>:
    3d9c:	66 1f       	adc	r22, r22
    3d9e:	77 1f       	adc	r23, r23
    3da0:	88 1f       	adc	r24, r24
    3da2:	99 1f       	adc	r25, r25
    3da4:	1a 94       	dec	r1
    3da6:	69 f7       	brne	.-38     	; 0x3d82 <__udivmodsi4_loop>
    3da8:	60 95       	com	r22
    3daa:	70 95       	com	r23
    3dac:	80 95       	com	r24
    3dae:	90 95       	com	r25
    3db0:	9b 01       	movw	r18, r22
    3db2:	ac 01       	movw	r20, r24
    3db4:	bd 01       	movw	r22, r26
    3db6:	cf 01       	movw	r24, r30
    3db8:	08 95       	ret

00003dba <__prologue_saves__>:
    3dba:	2f 92       	push	r2
    3dbc:	3f 92       	push	r3
    3dbe:	4f 92       	push	r4
    3dc0:	5f 92       	push	r5
    3dc2:	6f 92       	push	r6
    3dc4:	7f 92       	push	r7
    3dc6:	8f 92       	push	r8
    3dc8:	9f 92       	push	r9
    3dca:	af 92       	push	r10
    3dcc:	bf 92       	push	r11
    3dce:	cf 92       	push	r12
    3dd0:	df 92       	push	r13
    3dd2:	ef 92       	push	r14
    3dd4:	ff 92       	push	r15
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	cf 93       	push	r28
    3ddc:	df 93       	push	r29
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	ca 1b       	sub	r28, r26
    3de4:	db 0b       	sbc	r29, r27
    3de6:	0f b6       	in	r0, 0x3f	; 63
    3de8:	f8 94       	cli
    3dea:	de bf       	out	0x3e, r29	; 62
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	cd bf       	out	0x3d, r28	; 61
    3df0:	09 94       	ijmp

00003df2 <__epilogue_restores__>:
    3df2:	2a 88       	ldd	r2, Y+18	; 0x12
    3df4:	39 88       	ldd	r3, Y+17	; 0x11
    3df6:	48 88       	ldd	r4, Y+16	; 0x10
    3df8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dfa:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dfc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dfe:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e00:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e02:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e04:	b9 84       	ldd	r11, Y+9	; 0x09
    3e06:	c8 84       	ldd	r12, Y+8	; 0x08
    3e08:	df 80       	ldd	r13, Y+7	; 0x07
    3e0a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e0c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e0e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e10:	1b 81       	ldd	r17, Y+3	; 0x03
    3e12:	aa 81       	ldd	r26, Y+2	; 0x02
    3e14:	b9 81       	ldd	r27, Y+1	; 0x01
    3e16:	ce 0f       	add	r28, r30
    3e18:	d1 1d       	adc	r29, r1
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	f8 94       	cli
    3e1e:	de bf       	out	0x3e, r29	; 62
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	cd bf       	out	0x3d, r28	; 61
    3e24:	ed 01       	movw	r28, r26
    3e26:	08 95       	ret

00003e28 <_exit>:
    3e28:	f8 94       	cli

00003e2a <__stop_program>:
    3e2a:	ff cf       	rjmp	.-2      	; 0x3e2a <__stop_program>
